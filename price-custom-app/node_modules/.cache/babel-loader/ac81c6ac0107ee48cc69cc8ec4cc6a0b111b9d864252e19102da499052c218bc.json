{"ast":null,"code":"import a from 'react';\nimport { cx, css } from 'emotion';\nimport { Flex } from '@contentful/f36-core';\nimport o from '@contentful/f36-tokens';\nvar C = Object.defineProperty,\n  R = Object.defineProperties;\nvar w = Object.getOwnPropertyDescriptors;\nvar u = Object.getOwnPropertySymbols;\nvar k = Object.prototype.hasOwnProperty,\n  g = Object.prototype.propertyIsEnumerable;\nvar L = (e, t, n) => t in e ? C(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: n\n  }) : e[t] = n,\n  i = (e, t) => {\n    for (var n in t || (t = {})) k.call(t, n) && L(e, n, t[n]);\n    if (u) for (var n of u(t)) g.call(t, n) && L(e, n, t[n]);\n    return e;\n  },\n  c = (e, t) => R(e, w(t));\nvar h = (e, t) => {\n  var n = {};\n  for (var r in e) k.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);\n  if (e != null && u) for (var r of u(e)) t.indexOf(r) < 0 && g.call(e, r) && (n[r] = e[r]);\n  return n;\n};\nvar D = e => {\n    switch (e) {\n      case \"primary\":\n        return {\n          color: o.blue600,\n          \"&:hover, &:focus\": {\n            color: o.blue700\n          }\n        };\n      case \"secondary\":\n        return {\n          color: o.gray600,\n          \"&:hover, &:focus\": {\n            color: o.gray700\n          }\n        };\n      case \"positive\":\n        return {\n          color: o.green600,\n          \"&:hover, &:focus\": {\n            color: o.green700\n          }\n        };\n      case \"negative\":\n        return {\n          color: o.red600,\n          \"&:hover, &:focus\": {\n            color: o.red700\n          }\n        };\n      case \"muted\":\n        return {\n          color: o.gray400,\n          \"&:hover, &:focus\": {\n            color: o.gray500\n          }\n        };\n      case \"white\":\n        return {\n          color: o.colorWhite,\n          \"&:hover, &:focus\": {\n            color: o.gray100\n          }\n        };\n      case \"premium\":\n        return {\n          color: o.purple600,\n          \"&:hover, &:focus\": {\n            color: o.purple700\n          }\n        };\n      default:\n        return {\n          color: o.colorWhite\n        };\n    }\n  },\n  A = _ref => {\n    let {\n      variant: e,\n      isDisabled: t\n    } = _ref;\n    return css(c(i({\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      boxSizing: \"border-box\",\n      border: 0,\n      padding: 0,\n      margin: 0,\n      fontFamily: o.fontStackPrimary,\n      fontSize: o.fontSizeM,\n      fontWeight: o.fontWeightMedium,\n      transition: \"color \".concat(o.transitionDurationShort, \" \").concat(o.transitionEasingDefault),\n      textDecoration: \"none\",\n      background: \"none\",\n      appearance: \"none\",\n      whiteSpace: \"normal\",\n      textAlign: \"left\",\n      cursor: t ? \"not-allowed\" : \"pointer\",\n      opacity: t ? .5 : 1\n    }, D(e)), {\n      outline: \"none\",\n      \"&:focus, &:focus-visible, &:hover\": {\n        textDecoration: t ? \"none\" : \"underline\"\n      },\n      \"&:focus\": {\n        boxShadow: t ? \"none\" : o.glowPrimary,\n        borderRadius: o.borderRadiusSmall\n      },\n      \"&:focus:not(:focus-visible)\": {\n        borderRadius: 0,\n        boxShadow: \"none\"\n      },\n      \"&:focus-visible\": {\n        borderRadius: o.borderRadiusSmall,\n        boxShadow: t ? \"none\" : o.glowPrimary\n      }\n    }));\n  },\n  F = () => css({\n    fill: \"currentColor\",\n    transition: \"fill \".concat(o.transitionDurationShort, \" \").concat(o.transitionEasingDefault)\n  }),\n  X = _ref2 => {\n    let {\n      alignIcon: e\n    } = _ref2;\n    if (e === \"start\") return css({\n      marginLeft: o.spacing2Xs\n    });\n    if (e === \"end\") return css({\n      marginRight: o.spacing2Xs\n    });\n  },\n  z = () => css({\n    display: \"flex\",\n    alignItems: \"baseline\"\n  }),\n  p = {\n    textLink: A,\n    textLinkIcon: F,\n    textLinkText: X,\n    textLinkContent: z\n  };\nvar K = \"a\";\nfunction P(e, t) {\n  let y = e,\n    {\n      children: n,\n      className: r,\n      testId: E = \"cf-ui-text-link\",\n      variant: v = \"primary\",\n      href: I,\n      icon: s,\n      alignIcon: f = \"start\",\n      isDisabled: m,\n      as: S = K\n    } = y,\n    N = h(y, [\"children\", \"className\", \"testId\", \"variant\", \"href\", \"icon\", \"alignIcon\", \"isDisabled\", \"as\"]),\n    x = i({\n      ref: t,\n      className: cx(p.textLink({\n        variant: v,\n        isDisabled: m\n      }), e.className),\n      \"data-test-id\": E\n    }, N),\n    d = s ? a.createElement(Flex, {\n      as: \"span\",\n      alignSelf: \"center\"\n    }, a.cloneElement(s, {\n      className: cx(s.props.className, p.textLinkIcon()),\n      size: \"small\"\n    })) : null,\n    T = a.createElement(\"span\", {\n      className: p.textLinkContent()\n    }, s && f === \"start\" && d, n && a.createElement(\"span\", {\n      className: p.textLinkText({\n        alignIcon: s ? f : void 0\n      })\n    }, n), s && f === \"end\" && d);\n  return S === \"button\" ? a.createElement(\"button\", c(i({}, x), {\n    disabled: m,\n    type: \"button\"\n  }), T) : a.createElement(\"a\", i(c(i({}, x), {\n    onClick: m ? _ => {\n      _.preventDefault();\n    } : x.onClick,\n    href: I\n  }), m ? {\n    tabIndex: -1\n  } : {}), T);\n}\nP.displayName = \"TextLink\";\nvar U = a.forwardRef(P);\nexport { U as TextLink };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-text-link\\src\\TextLink.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-text-link\\src\\TextLink.styles.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type CommonProps,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { styles } from './TextLink.styles';\nimport { TextLinkVariant } from './types';\n\nconst TEXT_LINK_DEFAULT_TAG = 'a';\n\ninterface TextLinkInternalProps extends CommonProps {\n  children?: React.ReactNode;\n  /**\n   * Determines style variation of TextLink component\n   * @default primary\n   */\n  variant?: TextLinkVariant;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Determines the icon position regarding the link text\n   * @default start\n   */\n  alignIcon?: 'start' | 'end';\n  /**\n   * The element used for the root node.\n   * @default a\n   */\n  as?: 'a' | 'button';\n}\n\nexport type TextLinkProps<\n  E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG,\n> = PolymorphicProps<TextLinkInternalProps, E, 'disabled'>;\n\nfunction _TextLink<E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG>(\n  props: TextLinkProps<E>,\n  ref: React.Ref<any>,\n) {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-text-link',\n    variant = 'primary',\n    href,\n    icon,\n    alignIcon = 'start',\n    isDisabled,\n    as = TEXT_LINK_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n\n  const commonProps = {\n    ref,\n    className: cx(\n      styles.textLink({\n        variant,\n        isDisabled,\n      }),\n      props.className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  const iconContent = icon ? (\n    <Flex as=\"span\" alignSelf=\"center\">\n      {React.cloneElement(icon, {\n        className: cx(icon.props.className, styles.textLinkIcon()),\n        size: 'small',\n      })}\n    </Flex>\n  ) : null;\n\n  const commonContent = (\n    <span className={styles.textLinkContent()}>\n      {icon && alignIcon === 'start' && iconContent}\n      {children && (\n        <span\n          className={styles.textLinkText({\n            alignIcon: icon ? alignIcon : undefined,\n          })}\n        >\n          {children}\n        </span>\n      )}\n      {icon && alignIcon === 'end' && iconContent}\n    </span>\n  );\n\n  if (as === 'button') {\n    return (\n      <button {...commonProps} disabled={isDisabled} type=\"button\">\n        {commonContent}\n      </button>\n    );\n  }\n\n  return (\n    <a\n      {...commonProps}\n      onClick={\n        isDisabled\n          ? (e) => {\n              e.preventDefault();\n            }\n          : commonProps.onClick\n      }\n      href={href}\n      {...(isDisabled ? { tabIndex: -1 } : {})}\n    >\n      {commonContent}\n    </a>\n  );\n}\n\n_TextLink.displayName = 'TextLink';\n\nexport const TextLink: PolymorphicComponent<\n  ExpandProps<TextLinkInternalProps>,\n  typeof TEXT_LINK_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_TextLink);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { TextLinkProps } from './TextLink';\nimport { TextLinkVariant } from './types';\n\nconst variantToStyles = (variant: TextLinkVariant) => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        '&:hover, &:focus': {\n          color: tokens.blue700,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray600,\n        '&:hover, &:focus': {\n          color: tokens.gray700,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.green600,\n        '&:hover, &:focus': {\n          color: tokens.green700,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        '&:hover, &:focus': {\n          color: tokens.red700,\n        },\n      };\n    case 'muted':\n      return {\n        color: tokens.gray400,\n        '&:hover, &:focus': {\n          color: tokens.gray500,\n        },\n      };\n    case 'white':\n      return {\n        color: tokens.colorWhite,\n        '&:hover, &:focus': {\n          color: tokens.gray100,\n        },\n      };\n    case 'premium':\n      return {\n        color: tokens.purple600,\n        '&:hover, &:focus': {\n          color: tokens.purple700,\n        },\n      };\n    default:\n      return { color: tokens.colorWhite };\n  }\n};\n\nconst textLink = ({\n  variant,\n  isDisabled,\n}: Pick<TextLinkProps, 'variant' | 'isDisabled'>) =>\n  css({\n    display: 'inline-flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxSizing: 'border-box',\n    border: 0,\n    padding: 0,\n    margin: 0, // remove the default button margin in Safari.\n    fontFamily: tokens.fontStackPrimary,\n    fontSize: tokens.fontSizeM,\n    fontWeight: tokens.fontWeightMedium,\n    transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n    textDecoration: 'none',\n    background: 'none',\n    appearance: 'none',\n    whiteSpace: 'normal',\n    textAlign: 'left',\n    cursor: isDisabled ? 'not-allowed' : 'pointer',\n    opacity: isDisabled ? 0.5 : 1,\n    ...variantToStyles(variant),\n    outline: 'none',\n    '&:focus, &:focus-visible, &:hover': {\n      textDecoration: isDisabled ? 'none' : 'underline',\n    },\n    '&:focus': {\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n      borderRadius: tokens.borderRadiusSmall,\n    },\n    '&:focus:not(:focus-visible)': {\n      borderRadius: 0,\n      boxShadow: 'none',\n    },\n    '&:focus-visible': {\n      borderRadius: tokens.borderRadiusSmall,\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n    },\n  });\n\nconst textLinkIcon = () =>\n  css({\n    fill: 'currentColor',\n    transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n  });\n\nconst textLinkText = ({ alignIcon }: Pick<TextLinkProps, 'alignIcon'>) => {\n  if (alignIcon === 'start') {\n    return css({\n      marginLeft: tokens.spacing2Xs,\n    });\n  }\n\n  if (alignIcon === 'end') {\n    return css({\n      marginRight: tokens.spacing2Xs,\n    });\n  }\n};\n\nconst textLinkContent = () => {\n  return css({\n    display: 'flex',\n    alignItems: 'baseline',\n  });\n};\n\nexport const styles = {\n  textLink,\n  textLinkIcon,\n  textLinkText,\n  textLinkContent,\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}