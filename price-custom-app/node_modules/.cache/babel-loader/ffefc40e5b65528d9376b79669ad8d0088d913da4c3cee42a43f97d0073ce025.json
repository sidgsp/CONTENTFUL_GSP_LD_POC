{"ast":null,"code":"import { cx, css } from 'emotion';\nimport P, { createContext, forwardRef, useContext, useState, useMemo, Children, isValidElement } from 'react';\nimport { Box } from '@contentful/f36-core';\nimport a from '@contentful/f36-tokens';\nimport { Caption, Text } from '@contentful/f36-typography';\nimport { SortIcon, SortAscendingIcon, SortDescendingIcon } from '@contentful/f36-icons';\nvar ie = Object.defineProperty,\n  de = Object.defineProperties;\nvar me = Object.getOwnPropertyDescriptors;\nvar C = Object.getOwnPropertySymbols;\nvar W = Object.prototype.hasOwnProperty,\n  $ = Object.prototype.propertyIsEnumerable;\nvar L = (o, t, e) => t in o ? ie(o, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : o[t] = e,\n  n = (o, t) => {\n    for (var e in t || (t = {})) W.call(t, e) && L(o, e, t[e]);\n    if (C) for (var e of C(t)) $.call(t, e) && L(o, e, t[e]);\n    return o;\n  },\n  s = (o, t) => de(o, me(t));\nvar i = (o, t) => {\n  var e = {};\n  for (var r in o) W.call(o, r) && t.indexOf(r) < 0 && (e[r] = o[r]);\n  if (o != null && C) for (var r of C(o)) t.indexOf(r) < 0 && $.call(o, r) && (e[r] = o[r]);\n  return e;\n};\nvar O = () => ({\n  inline: css({\n    borderRadius: a.borderRadiusMedium,\n    boxShadow: \"0 0 0 1px \".concat(a.gray200),\n    \"th:first-child\": {\n      borderTopLeftRadius: a.borderRadiusMedium\n    },\n    \"th:last-child\": {\n      borderTopRightRadius: a.borderRadiusMedium\n    },\n    \"tr:last-child td:first-child\": {\n      borderBottomLeftRadius: a.borderRadiusMedium\n    },\n    \"tr:last-child td:last-child\": {\n      borderBottomRightRadius: a.borderRadiusMedium\n    }\n  }),\n  embedded: css({\n    borderBottom: \"1px solid \".concat(a.gray200)\n  }),\n  root: css({\n    width: \"100%\"\n  })\n});\nvar D = createContext({}),\n  z = () => useContext(D),\n  F = D.Provider;\nvar H = forwardRef((T, p) => {\n  var d = T,\n    {\n      children: o,\n      className: t,\n      layout: e = \"inline\",\n      testId: r = \"cf-ui-table\",\n      verticalAlign: l = \"top\"\n    } = d,\n    m = i(d, [\"children\", \"className\", \"layout\", \"testId\", \"verticalAlign\"]);\n  let b = O();\n  return P.createElement(Box, s(n({\n    cellPadding: \"0\",\n    cellSpacing: \"0\"\n  }, m), {\n    as: \"table\",\n    display: \"table\",\n    ref: p,\n    className: cx(b.root, b[e], t),\n    testId: r\n  }), P.createElement(F, {\n    value: {\n      verticalAlign: l\n    }\n  }, o));\n});\nH.displayName = \"Table\";\nfunction G(m, l) {\n  var p = m,\n    {\n      className: o,\n      children: t,\n      testId: e = \"cf-ui-table-body\"\n    } = p,\n    r = i(p, [\"className\", \"children\", \"testId\"]);\n  return P.createElement(Box, s(n({}, r), {\n    as: \"tbody\",\n    className: o,\n    ref: l,\n    testId: e\n  }), t);\n}\nG.displayName = \"TableBody\";\nvar E = forwardRef(G);\nvar u = {\n    body: {\n      name: \"body\",\n      as: \"td\",\n      offsetTop: 0\n    },\n    head: {\n      name: \"head\",\n      as: \"th\",\n      offsetTop: 0\n    }\n  },\n  I = createContext(u.body),\n  M = () => useContext(I),\n  N = I.Provider;\nvar V = _ref => {\n  let {\n    align: o,\n    isSortable: t,\n    isTableHead: e,\n    verticalAlign: r\n  } = _ref;\n  return {\n    button: css({\n      alignItems: \"flex-start\",\n      appearance: \"none\",\n      background: \"none\",\n      border: 0,\n      color: \"inherit\",\n      cursor: \"pointer\",\n      display: \"inline-flex\",\n      gap: a.spacing2Xs,\n      outline: 0,\n      padding: a.spacingS,\n      \"&:focus\": {\n        backgroundColor: a.gray100,\n        boxShadow: a.glowPrimary\n      },\n      \"&:focus:not(:focus-visible)\": {\n        backgroundColor: \"unset\",\n        boxShadow: \"unset\"\n      },\n      \"&:focus-visible\": {\n        backgroundColor: a.gray100,\n        boxShadow: a.glowPrimary\n      }\n    }),\n    container: css({\n      backgroundColor: a.colorWhite,\n      borderBottom: \"1px solid \".concat(a.gray200),\n      padding: t ? 0 : a.spacingS,\n      textAlign: o,\n      color: e ? a.gray600 : a.gray700,\n      fontWeight: e ? a.fontWeightMedium : a.fontWeightNormal,\n      verticalAlign: r\n    }),\n    sortIcon: l => css({\n      fill: a.gray400,\n      opacity: l ? 1 : 0,\n      transition: \"opacity \".concat(a.transitionEasingCubicBezier, \" \").concat(a.transitionDurationDefault)\n    })\n  };\n};\nfunction Re(o) {\n  return isValidElement(o) && !!o.props.children;\n}\nfunction g(o) {\n  let t = \"\";\n  return Children.toArray(o).map(e => {\n    isValidElement(e) && Re(e) ? t += g(e.props.children) : (typeof e == \"string\" || typeof e == \"number\") && (t = \"\".concat(t).concat(e));\n  }), t;\n}\nvar U = (e => (e.Ascending = \"ascending\", e.Descending = \"descending\", e))(U || {}),\n  ke = {\n    ascending: SortAscendingIcon,\n    descending: SortDescendingIcon\n  };\nfunction X(d, T) {\n  var b = d,\n    {\n      align: o = \"left\",\n      children: t,\n      className: e,\n      isSortable: r,\n      sortDirection: l,\n      testId: m = \"cf-ui-table-cell\"\n    } = b,\n    p = i(b, [\"align\", \"children\", \"className\", \"isSortable\", \"sortDirection\", \"testId\"]);\n  let [f, x] = useState(!1),\n    {\n      as: oe,\n      name: te,\n      offsetTop: re\n    } = M(),\n    {\n      verticalAlign: le\n    } = z(),\n    ae = ke[l],\n    S = te === \"head\",\n    B = V({\n      isSortable: S ? r : void 0,\n      isTableHead: S,\n      align: o,\n      verticalAlign: le\n    }),\n    ne = S ? Caption : Text,\n    se = r ? {\n      \"aria-sort\": l != null ? l : \"none\",\n      onBlur: () => x(!1),\n      onFocus: () => x(!0),\n      onMouseEnter: () => x(!0),\n      onMouseLeave: () => x(!1)\n    } : {},\n    pe = useMemo(() => g(t), [t]),\n    A = t;\n  return r && (A = P.createElement(\"button\", {\n    \"aria-label\": \"Sort \".concat(l === \"ascending\" ? \"descending\" : \"ascending\", \" by \").concat(pe),\n    className: B.button,\n    type: \"button\"\n  }, t, l ? P.createElement(ae, {\n    size: \"tiny\",\n    variant: \"secondary\"\n  }) : P.createElement(SortIcon, {\n    \"aria-hidden\": !f,\n    className: B.sortIcon(f),\n    size: \"tiny\",\n    variant: \"secondary\"\n  }))), P.createElement(ne, s(n(n({}, p), se), {\n    as: oe,\n    className: cx(B.container, e),\n    ref: T,\n    style: s(n({}, p.style), {\n      top: re || void 0\n    }),\n    testId: m\n  }), A);\n}\nX.displayName = \"TableCell\";\nvar k = forwardRef(X);\nvar J = () => ({\n  root: css({\n    color: a.gray600\n  }),\n  sticky: css({\n    th: {\n      position: \"sticky\",\n      top: 0,\n      zIndex: a.zIndexDefault\n    }\n  })\n});\nvar h = forwardRef((T, p) => {\n  var d = T,\n    {\n      children: o,\n      className: t,\n      isSticky: e = !1,\n      offsetTop: r,\n      testId: l = \"cf-ui-table-head\"\n    } = d,\n    m = i(d, [\"children\", \"className\", \"isSticky\", \"offsetTop\", \"testId\"]);\n  let b = J(),\n    f = cx(b.root, e && b.sticky, t);\n  return P.createElement(N, {\n    value: s(n({}, u.head), {\n      offsetTop: r || 0\n    })\n  }, P.createElement(Box, s(n({}, m), {\n    as: \"thead\",\n    className: f,\n    ref: p,\n    testId: l\n  }), o));\n});\nh.displayName = \"TableHead\";\nvar ee = () => ({\n  root: css({\n    \"&:last-child td\": {\n      borderBottom: \"none\"\n    },\n    \"&:hover td\": {\n      backgroundColor: a.gray100\n    }\n  }),\n  selected: css({\n    \"td, th\": {\n      backgroundColor: a.gray100\n    }\n  })\n});\nvar R = forwardRef((p, m) => {\n  var T = p,\n    {\n      className: o,\n      children: t,\n      isSelected: e = !1,\n      testId: r = \"cf-ui-table-row\"\n    } = T,\n    l = i(T, [\"className\", \"children\", \"isSelected\", \"testId\"]);\n  let d = ee();\n  return P.createElement(Box, s(n({}, l), {\n    as: \"tr\",\n    className: cx(d.root, {\n      [d.selected]: e\n    }, o),\n    ref: m,\n    testId: r\n  }), t);\n});\nR.displayName = \"TableRow\";\nvar y = H;\ny.Row = R;\ny.Head = h;\ny.Cell = k;\ny.Body = E;\nexport { y as Table, E as TableBody, k as TableCell, I as TableCellContext, N as TableCellContextProvider, U as TableCellSorting, h as TableHead, R as TableRow, u as contextOptions, M as useTableCellContext };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\Table.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\Table.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\tableContext.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableBody\\TableBody.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableCell\\TableCell.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableCell\\TableCellContext.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableCell\\TableCell.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\utils\\src\\getTextFromChildren\\getTextFromChildren.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableHead\\TableHead.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableHead\\TableHead.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableRow\\TableRow.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\TableRow\\TableRow.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-table\\src\\CompoundTable.tsx"],"sourcesContent":["import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport type * as CSS from 'csstype';\n\nimport { getTableStyles } from './Table.styles';\nimport { TableContextProvider } from './tableContext';\n\nexport type TableInternalProps = CommonProps & {\n  /**\n   * @default 'inline'\n   */\n  layout?: 'inline' | 'embedded';\n  /**\n   * @default 'top'\n   */\n  verticalAlign?: Extract<\n    CSS.Property.VerticalAlign,\n    'baseline' | 'bottom' | 'middle' | 'top'\n  >;\n};\n\nexport type TableProps = PropsWithHTMLElement<TableInternalProps, 'table'>;\n\nexport const Table = forwardRef<HTMLTableElement, ExpandProps<TableProps>>(\n  (\n    {\n      children,\n      className,\n      layout = 'inline',\n      testId = 'cf-ui-table',\n      verticalAlign = 'top',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableStyles();\n\n    return (\n      <Box\n        cellPadding=\"0\"\n        cellSpacing=\"0\"\n        {...otherProps}\n        as=\"table\"\n        display=\"table\"\n        ref={forwardedRef}\n        className={cx(styles.root, styles[layout], className)}\n        testId={testId}\n      >\n        <TableContextProvider value={{ verticalAlign }}>\n          {children}\n        </TableContextProvider>\n      </Box>\n    );\n  },\n);\n\nTable.displayName = 'Table';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableStyles = () => ({\n  inline: css({\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: `0 0 0 1px ${tokens.gray200}`,\n    'th:first-child': {\n      borderTopLeftRadius: tokens.borderRadiusMedium,\n    },\n    'th:last-child': {\n      borderTopRightRadius: tokens.borderRadiusMedium,\n    },\n    'tr:last-child td:first-child': {\n      borderBottomLeftRadius: tokens.borderRadiusMedium,\n    },\n    'tr:last-child td:last-child': {\n      borderBottomRightRadius: tokens.borderRadiusMedium,\n    },\n  }),\n  embedded: css({\n    borderBottom: `1px solid ${tokens.gray200}`,\n  }),\n  root: css({\n    width: '100%',\n  }),\n});\n","import { createContext, useContext } from 'react';\nimport { TableProps } from './Table';\n\nexport type TableContext = {\n  verticalAlign?: TableProps['verticalAlign'];\n};\n\nexport const TableContext = createContext<TableContext>({});\n\nexport const useTableContext = () => {\n  const context = useContext(TableContext);\n\n  return context;\n};\n\nexport const TableContextProvider = TableContext.Provider;\n","import React, { forwardRef, type ReactNode } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport type TableBodyInternalProps = CommonProps & {\n  children: ReactNode;\n};\n\nexport type TableBodyProps = PropsWithHTMLElement<\n  TableBodyInternalProps,\n  'tbody'\n>;\n\nfunction _TableBody(\n  { className, children, testId = 'cf-ui-table-body', ...otherProps },\n  forwardedRef,\n) {\n  return (\n    <Box\n      {...otherProps}\n      as=\"tbody\"\n      className={className}\n      ref={forwardedRef}\n      testId={testId}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_TableBody.displayName = 'TableBody';\n\nexport const TableBody = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableBodyProps>\n>(_TableBody);\n","import { cx } from 'emotion';\nimport React, { forwardRef, useMemo, useState } from 'react';\nimport {\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n  type PolymorphicComponent,\n} from '@contentful/f36-core';\nimport { Text, Caption, type TextProps } from '@contentful/f36-typography';\nimport {\n  SortAscendingIcon,\n  SortDescendingIcon,\n  SortIcon,\n} from '@contentful/f36-icons';\n\nimport { useTableCellContext } from './TableCellContext';\nimport { getTableCellStyles } from './TableCell.styles';\nimport { useTableContext } from '../tableContext';\nimport { getTextFromChildren } from '@contentful/f36-utils/src';\n\nexport enum TableCellSorting {\n  Ascending = 'ascending',\n  Descending = 'descending',\n}\n\nconst SortingIconMap = {\n  [TableCellSorting.Ascending]: SortAscendingIcon,\n  [TableCellSorting.Descending]: SortDescendingIcon,\n};\n\nexport type TableCellInternalProps = CommonProps & {\n  align?: 'center' | 'left' | 'right';\n  children?: React.ReactNode;\n  isSortable?: boolean;\n  sortDirection?: TableCellSorting;\n  width?: string | number;\n} & Pick<TextProps, 'isTruncated' | 'isWordBreak'>;\n\nexport type TableCellProps = PropsWithHTMLElement<\n  TableCellInternalProps,\n  'th' | 'td'\n>;\n\nfunction _TableCell(\n  {\n    align = 'left',\n    children,\n    className,\n    isSortable,\n    sortDirection,\n    testId = 'cf-ui-table-cell',\n    ...otherProps\n  }: TableCellProps,\n  forwardedRef: React.Ref<any>,\n) {\n  const [showSorting, setShowSorting] = useState(false);\n  const { as, name: context, offsetTop } = useTableCellContext();\n  const { verticalAlign } = useTableContext();\n  const SortingIcon = SortingIconMap[sortDirection];\n  const isTableHead = context === 'head';\n  const styles = getTableCellStyles({\n    isSortable: isTableHead ? isSortable : undefined,\n    isTableHead,\n    align,\n    verticalAlign,\n  });\n  const BaseComponent = isTableHead ? Caption : Text;\n  const sortableProps = isSortable\n    ? {\n        'aria-sort': (sortDirection ?? 'none') as\n          | 'none'\n          | 'ascending'\n          | 'descending'\n          | 'other',\n        onBlur: () => setShowSorting(false),\n        onFocus: () => setShowSorting(true),\n        onMouseEnter: () => setShowSorting(true),\n        onMouseLeave: () => setShowSorting(false),\n      }\n    : {};\n  const columnName = useMemo(() => getTextFromChildren(children), [children]);\n  let tableCellContent = children;\n\n  if (isSortable) {\n    tableCellContent = (\n      <button\n        aria-label={`Sort ${\n          sortDirection === TableCellSorting.Ascending\n            ? TableCellSorting.Descending\n            : TableCellSorting.Ascending\n        } by ${columnName}`}\n        className={styles.button}\n        type=\"button\"\n      >\n        {children}\n        {sortDirection ? (\n          <SortingIcon size=\"tiny\" variant=\"secondary\" />\n        ) : (\n          <SortIcon\n            aria-hidden={!showSorting}\n            className={styles.sortIcon(showSorting)}\n            size=\"tiny\"\n            variant=\"secondary\"\n          />\n        )}\n      </button>\n    );\n  }\n\n  return (\n    <BaseComponent\n      {...otherProps}\n      {...sortableProps}\n      as={as}\n      className={cx(styles.container, className)}\n      ref={forwardedRef}\n      style={{\n        ...otherProps.style,\n        top: offsetTop || undefined,\n      }}\n      testId={testId}\n    >\n      {tableCellContent}\n    </BaseComponent>\n  );\n}\n\n_TableCell.displayName = 'TableCell';\n\nexport const TableCell: PolymorphicComponent<\n  ExpandProps<TableCellInternalProps>,\n  'th' | 'td'\n> = forwardRef(_TableCell);\n","import { createContext, useContext } from 'react';\n\nexport type TableCellContextOption = {\n  name: 'body' | 'head';\n  as: 'td' | 'th';\n  offsetTop: number | string;\n};\n\nexport const contextOptions: {\n  body: TableCellContextOption;\n  head: TableCellContextOption;\n} = {\n  body: { name: 'body', as: 'td', offsetTop: 0 },\n  head: { name: 'head', as: 'th', offsetTop: 0 },\n};\n\nexport const TableCellContext = createContext(contextOptions.body);\n\nexport const useTableCellContext = () => {\n  const context = useContext(TableCellContext);\n\n  return context;\n};\n\nexport const TableCellContextProvider = TableCellContext.Provider;\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type TableCellInternalProps } from './TableCell';\nimport { type TableProps } from '../Table';\n\ntype GetTableCellStylesArguments = {\n  align: TableCellInternalProps['align'];\n  isSortable?: TableCellInternalProps['isSortable'];\n  isTableHead: boolean;\n  verticalAlign?: TableProps['verticalAlign'];\n};\n\nexport const getTableCellStyles = ({\n  align,\n  isSortable,\n  isTableHead,\n  verticalAlign,\n}: GetTableCellStylesArguments) => ({\n  button: css({\n    alignItems: 'flex-start',\n    appearance: 'none',\n    background: 'none',\n    border: 0,\n    color: 'inherit',\n    cursor: 'pointer',\n    display: 'inline-flex',\n    gap: tokens.spacing2Xs,\n    outline: 0,\n    padding: tokens.spacingS,\n\n    '&:focus': {\n      backgroundColor: tokens.gray100,\n      boxShadow: tokens.glowPrimary,\n    },\n    '&:focus:not(:focus-visible)': {\n      backgroundColor: 'unset',\n      boxShadow: 'unset',\n    },\n    '&:focus-visible': {\n      backgroundColor: tokens.gray100,\n      boxShadow: tokens.glowPrimary,\n    },\n  }),\n  container: css({\n    backgroundColor: tokens.colorWhite,\n    borderBottom: `1px solid ${tokens.gray200}`,\n    padding: isSortable ? 0 : tokens.spacingS,\n    textAlign: align,\n    color: isTableHead ? tokens.gray600 : tokens.gray700,\n    fontWeight: isTableHead ? tokens.fontWeightMedium : tokens.fontWeightNormal,\n    verticalAlign,\n  }),\n  sortIcon: (showSorting: boolean) =>\n    css({\n      fill: tokens.gray400,\n      opacity: showSorting ? 1 : 0,\n      transition: `opacity ${tokens.transitionEasingCubicBezier} ${tokens.transitionDurationDefault}`,\n    }),\n});\n","import {\n  Children,\n  isValidElement,\n  type ReactElement,\n  type ReactNode,\n} from 'react';\n\nfunction hasChildren(\n  element: ReactNode,\n): element is ReactElement<{ children: ReactNode | ReactNode[] }> {\n  return isValidElement(element) && Boolean(element.props.children);\n}\n\n/**\n * Recursively extracts text and numbers from React children to return as a\n * combined string.\n *\n * @param children - React node to extract text from\n * @returns String with all child nodes' text combined\n */\nexport function getTextFromChildren(children: ReactNode) {\n  let string = '';\n\n  Children.toArray(children).map((child) => {\n    if (isValidElement(child) && hasChildren(child)) {\n      string += getTextFromChildren(child.props.children);\n    } else if (typeof child === 'string' || typeof child === 'number') {\n      string = `${string}${child}`;\n    }\n  });\n\n  return string;\n}\n","import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport {\n  TableCellContextProvider,\n  contextOptions,\n} from '../TableCell/TableCellContext';\nimport { getTableHeadStyles } from './TableHead.styles';\n\nexport type TableHeadInternalProps = CommonProps & {\n  isSticky?: boolean;\n  offsetTop?: number | string;\n  children: React.ReactNode;\n};\n\nexport type TableHeadProps = PropsWithHTMLElement<\n  TableHeadInternalProps,\n  'thead'\n>;\n\nexport const TableHead = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableHeadProps>\n>(\n  (\n    {\n      children,\n      className,\n      isSticky = false,\n      offsetTop,\n      testId = 'cf-ui-table-head',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableHeadStyles();\n    const classNames = cx(styles.root, isSticky && styles.sticky, className);\n\n    return (\n      <TableCellContextProvider\n        value={{ ...contextOptions.head, offsetTop: offsetTop || 0 }}\n      >\n        <Box\n          {...otherProps}\n          as=\"thead\"\n          className={classNames}\n          ref={forwardedRef}\n          testId={testId}\n        >\n          {children}\n        </Box>\n      </TableCellContextProvider>\n    );\n  },\n);\n\nTableHead.displayName = 'TableHead';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableHeadStyles = () => ({\n  root: css({\n    color: tokens.gray600,\n  }),\n  sticky: css({\n    th: {\n      position: 'sticky',\n      top: 0,\n      zIndex: tokens.zIndexDefault,\n    },\n  }),\n});\n","import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { getTableRowStyles } from './TableRow.styles';\n\nexport type TableRowInternalProps = CommonProps & {\n  isSelected?: boolean;\n  children: React.ReactNode;\n};\n\nexport type TableRowProps = PropsWithHTMLElement<TableRowInternalProps, 'tr'>;\n\nexport const TableRow = forwardRef<\n  HTMLTableRowElement,\n  ExpandProps<TableRowProps>\n>(\n  (\n    {\n      className,\n      children,\n      isSelected = false,\n      testId = 'cf-ui-table-row',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableRowStyles();\n\n    return (\n      <Box\n        {...otherProps}\n        as=\"tr\"\n        className={cx(\n          styles.root,\n          {\n            [styles.selected]: isSelected,\n          },\n          className,\n        )}\n        ref={forwardedRef}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTableRow.displayName = 'TableRow';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableRowStyles = () => ({\n  root: css({\n    '&:last-child td': {\n      borderBottom: 'none',\n    },\n    '&:hover td': {\n      backgroundColor: tokens.gray100,\n    },\n  }),\n  selected: css({\n    'td, th': {\n      backgroundColor: tokens.gray100,\n    },\n  }),\n});\n","import { Table as OriginalTable } from './Table';\nimport { TableBody } from './TableBody/TableBody';\nimport { TableCell } from './TableCell/TableCell';\nimport { TableHead } from './TableHead/TableHead';\nimport { TableRow } from './TableRow/TableRow';\n\ntype CompoundTable = typeof OriginalTable & {\n  Row: typeof TableRow;\n  Head: typeof TableHead;\n  Cell: typeof TableCell;\n  Body: typeof TableBody;\n};\n\nexport const Table = OriginalTable as CompoundTable;\nTable.Row = TableRow;\nTable.Head = TableHead;\nTable.Cell = TableCell;\nTable.Body = TableBody;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}