{"ast":null,"code":"import u, { forwardRef } from 'react';\nimport { cx, css } from 'emotion';\nimport i from '@contentful/f36-tokens';\nimport { Box } from '@contentful/f36-core';\nvar G = Object.defineProperty,\n  T = Object.defineProperties;\nvar B = Object.getOwnPropertyDescriptors;\nvar c = Object.getOwnPropertySymbols;\nvar g = Object.prototype.hasOwnProperty,\n  P = Object.prototype.propertyIsEnumerable;\nvar x = (e, o, t) => o in e ? G(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  r = (e, o) => {\n    for (var t in o || (o = {})) g.call(o, t) && x(e, t, o[t]);\n    if (c) for (var t of c(o)) P.call(o, t) && x(e, t, o[t]);\n    return e;\n  },\n  a = (e, o) => T(e, B(o));\nvar f = (e, o) => {\n  var t = {};\n  for (var n in e) g.call(e, n) && o.indexOf(n) < 0 && (t[n] = e[n]);\n  if (e != null && c) for (var n of c(e)) o.indexOf(n) < 0 && P.call(e, n) && (t[n] = e[n]);\n  return t;\n};\nvar V = \"svg\",\n  E = {\n    xlarge: {\n      height: \"48px\",\n      width: \"48px\"\n    },\n    large: {\n      height: \"32px\",\n      width: \"32px\"\n    },\n    medium: {\n      height: \"24px\",\n      width: \"24px\"\n    },\n    small: {\n      height: \"18px\",\n      width: \"18px\"\n    },\n    tiny: {\n      height: \"16px\",\n      width: \"16px\"\n    }\n  },\n  k = {\n    muted: i.gray600,\n    negative: i.red600,\n    positive: i.green600,\n    primary: i.blue600,\n    secondary: i.gray900,\n    warning: i.colorWarning,\n    white: i.colorWhite,\n    premium: i.purple500\n  },\n  _ = e => {\n    let o = e[\"aria-label\"],\n      t = e[\"aria-labelledby\"];\n    return o || t ? {} : {\n      \"aria-hidden\": !0\n    };\n  };\nfunction z(O, v) {\n  var d = O,\n    {\n      as: e,\n      children: o,\n      className: t,\n      variant: n = \"primary\",\n      role: m = \"img\",\n      size: p = \"small\",\n      testId: s = \"cf-ui-icon\",\n      trimmed: C,\n      viewBox: b = \"0 0 24 24\"\n    } = d,\n    l = f(d, [\"as\", \"children\", \"className\", \"variant\", \"role\", \"size\", \"testId\", \"trimmed\", \"viewBox\"]);\n  let I = {\n      className: cx(css({\n        fill: k[n],\n        height: E[p].height,\n        width: C ? \"auto\" : E[p].width\n      }), t),\n      ref: v,\n      testId: s,\n      role: m\n    },\n    h = _(l);\n  return e ? u.createElement(Box, a(r(r(r({\n    display: \"inline-block\"\n  }, h), l), I), {\n    as: e\n  })) : u.createElement(Box, r(a(r(r({\n    viewBox: b,\n    display: \"inline-block\"\n  }, h), l), {\n    as: V\n  }), I), o);\n}\nvar y = forwardRef(z);\nfunction N(_ref) {\n  let {\n    name: e,\n    path: o,\n    props: t,\n    trimmed: n,\n    viewBox: m\n  } = _ref;\n  let p = function (s) {\n    return u.createElement(y, a(r(r({\n      viewBox: m\n    }, t), s), {\n      trimmed: n\n    }), o);\n  };\n  return e && (p.displayName = e), p;\n}\nexport { y as Icon, N as generateIcon };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-icon\\src\\generateIcon.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-icon\\src\\Icon.tsx"],"sourcesContent":["import React, { type ReactElement } from 'react';\n\nimport { Icon, type IconProps } from './Icon';\n\nexport type GeneratedIconProps = Omit<\n  IconProps,\n  'as' | 'children' | 'name' | 'viewBox'\n> & { children?: never };\n\ntype GenerateIconParameters = {\n  /**\n   * Icon name is used as the generated icon's component display name\n   */\n  name?: string;\n  /**\n   * The SVG path(s) to render in the icon wrapper\n   */\n  path: ReactElement;\n  /**\n   * A collection of default props to set on the generated icon\n   */\n  props?: GeneratedIconProps;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: IconProps['trimmed'];\n  /**\n   * Custom SVG viewBox attribute to use for the generated icon\n   */\n  viewBox?: IconProps['viewBox'];\n};\n\nexport function generateIcon({\n  name,\n  path,\n  props: defaultProps,\n  trimmed,\n  viewBox,\n}: GenerateIconParameters) {\n  const Component = function (props: IconProps) {\n    return (\n      <Icon viewBox={viewBox} {...defaultProps} {...props} trimmed={trimmed}>\n        {path}\n      </Icon>\n    );\n  };\n\n  if (name) {\n    Component.displayName = name;\n  }\n\n  return Component;\n}\n","import { css, cx } from 'emotion';\nimport React, {\n  forwardRef,\n  type ComponentType,\n  type ExoticComponent,\n  type ReactElement,\n  type SVGAttributes,\n} from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nconst ICON_DEFAULT_TAG = 'svg';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type IconComponent = ExoticComponent<any> | ComponentType<any>;\n\nexport type IconSize = 'xlarge' | 'large' | 'medium' | 'small' | 'tiny';\n\nexport type IconVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'secondary'\n  | 'warning'\n  | 'muted'\n  | 'white'\n  | 'premium';\n\nconst sizes: { [key in IconSize]: { [key in 'height' | 'width']: string } } = {\n  xlarge: {\n    height: '48px',\n    width: '48px',\n  },\n  large: {\n    height: '32px',\n    width: '32px',\n  },\n  medium: {\n    height: '24px',\n    width: '24px',\n  },\n  small: {\n    height: '18px',\n    width: '18px',\n  },\n  tiny: {\n    height: '16px',\n    width: '16px',\n  },\n};\n\nconst fills: { [key in IconVariant]: string } = {\n  muted: tokens.gray600,\n  negative: tokens.red600,\n  positive: tokens.green600,\n  primary: tokens.blue600,\n  secondary: tokens.gray900,\n  warning: tokens.colorWarning,\n  white: tokens.colorWhite,\n  premium: tokens.purple500,\n};\n\nexport type IconInternalProps = CommonProps & {\n  children?: ReactElement | ReactElement[];\n  /**\n   * Determines the size of the icon\n   */\n  size?: IconSize;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: boolean;\n  /**\n   * Determines the fill color used\n   */\n  variant?: IconVariant;\n  /**\n   * Custom SVG viewBox attribute to use\n   */\n  viewBox?: SVGAttributes<SVGSVGElement>['viewBox'];\n};\n\nexport type IconProps<E extends React.ElementType = IconComponent> =\n  PolymorphicProps<\n    IconInternalProps,\n    E,\n    'as' | 'children' | 'width' | 'height'\n  >;\n\nconst useAriaHidden = (\n  props: Pick<\n    IconProps<typeof ICON_DEFAULT_TAG>,\n    'aria-label' | 'aria-labelledby'\n  >,\n) => {\n  const ariaLabel = props['aria-label'];\n  const ariaLabelBy = props['aria-labelledby'];\n\n  if (ariaLabel || ariaLabelBy) {\n    return {};\n  }\n\n  return {\n    'aria-hidden': true,\n  };\n};\n\nexport function _Icon<E extends React.ElementType = IconComponent>(\n  {\n    as,\n    children,\n    className,\n    variant = 'primary',\n    role = 'img',\n    size = 'small',\n    testId = 'cf-ui-icon',\n    trimmed,\n    viewBox = '0 0 24 24',\n    ...otherProps\n  }: IconProps<E>,\n  forwardedRef: React.Ref<any>,\n) {\n  const shared = {\n    className: cx(\n      css({\n        fill: fills[variant],\n        height: sizes[size].height,\n        width: trimmed ? 'auto' : sizes[size].width,\n      }),\n      className,\n    ),\n    ref: forwardedRef,\n    testId,\n    role,\n  };\n\n  const ariaHiddenProps = useAriaHidden(otherProps);\n\n  if (as) {\n    return (\n      <Box\n        display=\"inline-block\"\n        {...ariaHiddenProps}\n        {...otherProps}\n        {...shared}\n        as={as as React.ElementType}\n      />\n    );\n  }\n\n  return (\n    <Box\n      viewBox={viewBox}\n      display=\"inline-block\"\n      {...ariaHiddenProps}\n      {...otherProps}\n      as={ICON_DEFAULT_TAG}\n      {...shared}\n    >\n      {children}\n    </Box>\n  );\n}\n\nexport const Icon: PolymorphicComponent<\n  ExpandProps<IconInternalProps>,\n  typeof ICON_DEFAULT_TAG,\n  'width' | 'height'\n> = forwardRef(_Icon);\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}