{"ast":null,"code":"import u, { useRef, useEffect, useCallback, Children, isValidElement } from 'react';\nimport { createPortal } from 'react-dom';\nfunction y({\n  children: t,\n  container: r\n}) {\n  let e = useRef(r),\n    o = useRef(document.createElement(\"div\"));\n  return useEffect(() => {\n    e.current || (e.current = document.body);\n    let n = o.current;\n    return n.setAttribute(\"data-cf-ui-portal\", \"\"), e.current.appendChild(n), () => {\n      e.current && e.current.removeChild(n);\n    };\n  }, []), o.current ? createPortal(t, o.current) : null;\n}\nvar g = t => {\n  let {\n      ref: r,\n      keys: e,\n      event: o = \"keydown\"\n    } = t,\n    n = useRef(document),\n    c = useCallback(s => {\n      Object.prototype.hasOwnProperty.call(e, s.key) && e[s.key](s);\n    }, [e]);\n  useEffect(() => (r && r.current && (n.current = r.current), n.current.addEventListener(o, c), () => {\n    n.current.removeEventListener(o, c);\n  }), [o, c, r]);\n};\nfunction h(t, r) {\n  let e = {\n      before: \"\",\n      match: \"\",\n      after: \"\"\n    },\n    o = r.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n    n = new RegExp(`(?<before>.*?)(?<match>${o})(?<after>.*)`, \"i\"),\n    c = t.match(n);\n  return c && (e.before = c.groups.before, e.match = c.groups.match, e.after = c.groups.after), e;\n}\nfunction R(t, r = 1) {\n  let e = parseInt(t.slice(1, 3), 16),\n    o = parseInt(t.slice(3, 5), 16),\n    n = parseInt(t.slice(5, 7), 16);\n  return `rgba(${e}, ${o}, ${n}, ${r})`;\n}\nfunction E(t) {\n  return isValidElement(t) && !!t.props.children;\n}\nfunction p(t) {\n  let r = \"\";\n  return Children.toArray(t).map(e => {\n    isValidElement(e) && E(e) ? r += p(e.props.children) : (typeof e == \"string\" || typeof e == \"number\") && (r = `${r}${e}`);\n  }), r;\n}\nvar f = u.createContext(\"low\"),\n  v = () => u.useContext(f),\n  D = f.Provider;\nexport { D as DensityProvider, y as Portal, h as getStringMatch, p as getTextFromChildren, R as hexToRGBA, v as useDensity, g as useKeyboard };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["u","useRef","useEffect","useCallback","Children","isValidElement"],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\Portal\\Portal.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\useKeyboard\\useKeyboard.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\getStringMatch\\getStringMatch.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\hexToRGBA\\hexToRGBA.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\getTextFromChildren\\getTextFromChildren.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-utils\\src\\useDensity\\useDensity.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport interface PortalProps {\n  children: React.ReactElement;\n  /**\n   * Container element for Portal\n   */\n  container?: Document | HTMLElement;\n}\n\nexport function Portal({\n  children,\n  container: containerElement,\n}: PortalProps): React.ReactPortal | null {\n  const container = useRef<Document | HTMLElement | undefined>(\n    containerElement,\n  );\n  const portal = useRef<HTMLDivElement>(document.createElement('div'));\n\n  useEffect(() => {\n    if (!container.current) {\n      container.current = document.body;\n    }\n\n    const portalContainer = portal.current;\n    portalContainer.setAttribute('data-cf-ui-portal', '');\n    container.current.appendChild(portalContainer);\n\n    return () => {\n      if (container.current) {\n        container.current.removeChild(portalContainer);\n      }\n    };\n  }, []);\n\n  return portal.current ? createPortal(children, portal.current) : null;\n}\n","import { useEffect, useCallback, MutableRefObject, useRef } from 'react';\n\nexport interface UseKeyboardProps {\n  /**\n   * Object of key names and handlers defines which key to look for i.e. `ArrowUp`, `Escape`, `Shift`\n   * value is a callback function to be called when key matches\n   */\n  keys: {\n    [key: string]: (e: KeyboardEvent) => void;\n  };\n  /**\n   * Defines the attached event type\n   * @default 'keydown'\n   */\n  event?: 'keyup' | 'keypress' | 'keydown';\n\n  /**\n   * React reference to attach the event to its current element\n   */\n  ref?: MutableRefObject<HTMLElement>;\n}\n\n/**\n *\n * @description hook to attach a handler keyboard event listener to `document` or `HTMLElements` with garbage collection\n * @example\n * useKeyboard({\n *  event: 'keydown', // Optional, default is `keydown`\n *  ref: yourReactRef, // Optional, by default event is attached to document\n *  keys: {\n *    ArrowUp: (e) => handleArrowUp(e),\n *    Tab: (e) => handleTab(e)\n *  }\n * })\n */\nexport const useKeyboard = (props: UseKeyboardProps) => {\n  const { ref, keys, event = 'keydown' } = props;\n  const element = useRef<HTMLElement | Document>(document);\n\n  const handleKeyEvent = useCallback(\n    (e) => {\n      const isKey = Object.prototype.hasOwnProperty.call(keys, e.key);\n      if (isKey) {\n        keys[e.key](e);\n      }\n    },\n    [keys],\n  );\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      element.current = ref.current;\n    }\n\n    element.current.addEventListener(event, handleKeyEvent);\n\n    return () => {\n      element.current.removeEventListener(event, handleKeyEvent);\n    };\n  }, [event, handleKeyEvent, ref]);\n};\n","export interface MatchObj {\n  before: string;\n  match: string;\n  after: string;\n}\n\n/**\n * Function that can be used to find a substring inside another string.\n * It needs two strings, the second one will be used in a Regex expression\n * to be matched to the first one.\n * The function will return an object containing the match, what comes before the match,\n * and what comes after the match in the base string\n *\n * @param base\n * @param match\n */\nexport function getStringMatch(base: string, match: string): MatchObj {\n  const matchResult = { before: '', match: '', after: '' };\n  const escapedMatch = match.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n  const regex = new RegExp(\n    `(?<before>.*?)(?<match>${escapedMatch})(?<after>.*)`,\n    'i',\n  );\n  const matches = base.match(regex);\n\n  if (matches) {\n    matchResult.before = matches.groups.before;\n    matchResult.match = matches.groups.match;\n    matchResult.after = matches.groups.after;\n  }\n\n  return matchResult;\n}\n","/**\n * Converts a hex color to rgba\n * @param hex - Hex color\n * @param alpha - Alpha value @default 1\n * @returns rgba color\n * @example\n * hexToRGBA('#000000', 0.5)\n */\nexport function hexToRGBA(hex: string, alpha = 1) {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n","import {\n  Children,\n  isValidElement,\n  type ReactElement,\n  type ReactNode,\n} from 'react';\n\nfunction hasChildren(\n  element: ReactNode,\n): element is ReactElement<{ children: ReactNode | ReactNode[] }> {\n  return isValidElement(element) && Boolean(element.props.children);\n}\n\n/**\n * Recursively extracts text and numbers from React children to return as a\n * combined string.\n *\n * @param children - React node to extract text from\n * @returns String with all child nodes' text combined\n */\nexport function getTextFromChildren(children: ReactNode) {\n  let string = '';\n\n  Children.toArray(children).map((child) => {\n    if (isValidElement(child) && hasChildren(child)) {\n      string += getTextFromChildren(child.props.children);\n    } else if (typeof child === 'string' || typeof child === 'number') {\n      string = `${string}${child}`;\n    }\n  });\n\n  return string;\n}\n","import React from 'react';\n\nexport type Density = 'low' | 'high';\n\nconst DensityContext = React.createContext<Density>('low');\n\nexport const useDensity = () => {\n  const context = React.useContext(DensityContext);\n\n  return context;\n};\n\nexport const DensityProvider = DensityContext.Provider;\n"],"mappings":"AAAA,OAASA,CAAA,IAAAC,MAAA,EAAAC,SAAW,EAAAC,WAAc,EAAAC,QAClC,EAASC,cAAA,QAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}