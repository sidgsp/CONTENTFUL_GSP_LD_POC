{"ast":null,"code":"import d, { useState, useCallback } from 'react';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { Button } from '@contentful/f36-button';\nimport { cx, css } from 'emotion';\nvar L = Object.defineProperty,\n  F = Object.defineProperties;\nvar N = Object.getOwnPropertyDescriptors;\nvar m = Object.getOwnPropertySymbols;\nvar h = Object.prototype.hasOwnProperty,\n  E = Object.prototype.propertyIsEnumerable;\nvar v = (t, o, e) => o in t ? L(t, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : t[o] = e,\n  f = (t, o) => {\n    for (var e in o || (o = {})) h.call(o, e) && v(t, e, o[e]);\n    if (m) for (var e of m(o)) E.call(o, e) && v(t, e, o[e]);\n    return t;\n  },\n  C = (t, o) => F(t, N(o));\nvar g = (t, o) => {\n  var e = {};\n  for (var n in t) h.call(t, n) && o.indexOf(n) < 0 && (e[n] = t[n]);\n  if (t != null && m) for (var n of m(t)) o.indexOf(n) < 0 && E.call(t, n) && (e[n] = t[n]);\n  return e;\n};\nvar T = (t, o, e) => new Promise((n, i) => {\n  var p = r => {\n      try {\n        a(e.next(r));\n      } catch (l) {\n        i(l);\n      }\n    },\n    c = r => {\n      try {\n        a(e.throw(r));\n      } catch (l) {\n        i(l);\n      }\n    },\n    a = r => r.done ? n(r.value) : Promise.resolve(r.value).then(p, c);\n  a((e = e.apply(t, o)).next());\n});\nvar w = _ref => {\n  let {\n    size: t\n  } = _ref;\n  let o = t === \"small\" ? \"32px\" : \"40px\";\n  return {\n    button: css({\n      height: o,\n      minHeight: \"auto\",\n      minWidth: \"auto\",\n      width: o\n    })\n  };\n};\nfunction H(A, z) {\n  var B = A,\n    {\n      className: t,\n      isDisabled: o = !1,\n      isLoading: e = !1,\n      label: n,\n      onBlur: i,\n      onCopy: p,\n      size: c = \"medium\",\n      testId: a = \"cf-ui-copy-button\",\n      tooltipCopiedText: r = \"Copied!\",\n      tooltipProps: l,\n      tooltipText: k = \"Copy to clipboard\",\n      value: u\n    } = B,\n    M = g(B, [\"className\", \"isDisabled\", \"isLoading\", \"label\", \"onBlur\", \"onCopy\", \"size\", \"testId\", \"tooltipCopiedText\", \"tooltipProps\", \"tooltipText\", \"value\"]);\n  let I = w({\n      size: c\n    }),\n    [y, x] = useState(!1),\n    S = useCallback(() => T(this, null, function* () {\n      try {\n        yield window.navigator.clipboard.writeText(u);\n      } catch (b) {\n        let s = document.createElement(\"input\");\n        s.style.display = \"none\", document.body.appendChild(s), s.value = u, s.focus(), s.select();\n        let P = document.execCommand(\"copy\");\n        if (P === \"unsuccessful\") throw new Error(\"Unable to copy value\", {\n          cause: P\n        });\n        s.remove();\n        return;\n      }\n      p == null || p(u), x(!0);\n    }), [p, u]),\n    D = b => {\n      y && x(!1), i == null || i(b);\n    };\n  return d.createElement(Tooltip, C(f({\n    content: y ? r : k\n  }, l), {\n    isDisabled: o\n  }), d.createElement(Button, C(f({\n    \"aria-label\": y ? \"Value copied to clipboard\" : n != null ? n : \"Copy to clipboard\",\n    \"aria-live\": \"assertive\",\n    className: cx(I.button, t),\n    isDisabled: e || o,\n    isLoading: e,\n    onBlur: D,\n    testId: a,\n    startIcon: d.createElement(CopyIcon, {\n      variant: \"muted\",\n      size: c === \"small\" ? \"tiny\" : \"small\"\n    }),\n    variant: \"secondary\"\n  }, M), {\n    onClick: S,\n    ref: z\n  })));\n}\nH.displayName = \"CopyButton\";\nvar q = d.forwardRef(H);\nexport { q as CopyButton };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-copybutton\\src\\CopyButton.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-copybutton\\src\\CopyButton.styles.ts"],"sourcesContent":["import React, {\n  useCallback,\n  useState,\n  type MouseEventHandler,\n  type FocusEventHandler,\n} from 'react';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport type { ExpandProps } from '@contentful/f36-core';\nimport { Tooltip, type TooltipProps } from '@contentful/f36-tooltip';\nimport { Button, type ButtonProps } from '@contentful/f36-button';\nimport { getCopyButtonStyles } from './CopyButton.styles';\nimport { cx } from 'emotion';\n\nexport type CopyButtonProps = Omit<\n  ButtonProps,\n  'endIcon' | 'onCopy' | 'onClick' | 'isDisabled' | 'size' | 'value'\n> & {\n  /**\n   * Function that gets called when the button is clicked\n   */\n  onCopy?: (string) => void;\n  /**\n   * Text to be shown when the button is clicked\n   * @default Copied!\n   */\n  tooltipCopiedText?: string;\n  /**\n   * Text to be shown when button is hovered or focused\n   * @default Copy to clipboard\n   */\n  tooltipText?: string;\n  /**\n   * Props that are passed to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content' | 'children'>;\n  /**\n   * Label to be used on aria-label for the button\n   * @default Copy to clipboard\n   */\n  label?: string;\n  /**\n   * Allows to disable the copy button, when true the tooltip would not be shown\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Allows setting size of the copy button to small\n   * @default medium\n   */\n  size?: 'small' | 'medium';\n  /**\n   * Value that will be copied to clipboard when the button is clicked\n   */\n  value: string;\n};\n\nfunction _CopyButton(\n  {\n    className,\n    isDisabled = false,\n    isLoading = false,\n    label,\n    onBlur,\n    onCopy,\n    size = 'medium',\n    testId = 'cf-ui-copy-button',\n    tooltipCopiedText = 'Copied!',\n    tooltipProps,\n    tooltipText = 'Copy to clipboard',\n    value,\n    ...otherProps\n  }: ExpandProps<CopyButtonProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const styles = getCopyButtonStyles({ size });\n  const [copied, setCopied] = useState(false);\n\n  const handleClick = useCallback<\n    MouseEventHandler<HTMLButtonElement>\n  >(async () => {\n    try {\n      await window.navigator.clipboard.writeText(value);\n    } catch (error) {\n      // Chrome requires specific permissions on iframes using the async clipboard\n      // API. We can't control that so we fall back to this\n      const input = document.createElement('input');\n      input.style.display = 'none';\n      document.body.appendChild(input);\n      input.value = value;\n      input.focus();\n      input.select();\n      const result = document.execCommand('copy');\n\n      // @ts-expect-error -- The return type of `execCommand` can also be string\n      if (result === 'unsuccessful') {\n        throw new Error('Unable to copy value', { cause: result });\n      }\n      input.remove();\n\n      return;\n    }\n\n    onCopy?.(value);\n    setCopied(true);\n  }, [onCopy, value]);\n\n  const handleBlur: FocusEventHandler<HTMLButtonElement> = (event) => {\n    if (copied) {\n      setCopied(false);\n    }\n\n    onBlur?.(event);\n  };\n\n  return (\n    <Tooltip\n      content={copied ? tooltipCopiedText : tooltipText}\n      {...tooltipProps}\n      isDisabled={isDisabled}\n    >\n      <Button\n        aria-label={\n          copied ? 'Value copied to clipboard' : label ?? `Copy to clipboard`\n        }\n        aria-live=\"assertive\"\n        className={cx(styles.button, className)}\n        isDisabled={isLoading || isDisabled}\n        isLoading={isLoading}\n        onBlur={handleBlur}\n        testId={testId}\n        startIcon={\n          <CopyIcon\n            variant=\"muted\"\n            size={size === 'small' ? 'tiny' : 'small'}\n          />\n        }\n        variant=\"secondary\"\n        {...otherProps}\n        onClick={handleClick}\n        ref={ref}\n      />\n    </Tooltip>\n  );\n}\n\n_CopyButton.displayName = 'CopyButton';\n\nexport const CopyButton = React.forwardRef(_CopyButton);\n","import { css } from 'emotion';\nimport { CopyButtonProps } from './CopyButton';\n\nexport const getCopyButtonStyles = ({\n  size,\n}: Pick<CopyButtonProps, 'size'>) => {\n  const buttonSize = size === 'small' ? '32px' : '40px';\n\n  return {\n    button: css({\n      height: buttonSize,\n      minHeight: 'auto',\n      minWidth: 'auto',\n      width: buttonSize,\n    }),\n  };\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}