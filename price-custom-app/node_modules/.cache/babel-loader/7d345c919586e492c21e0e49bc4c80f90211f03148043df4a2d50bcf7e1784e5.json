{"ast":null,"code":"import s, { useState, useCallback } from 'react';\nimport { cx, css } from 'emotion';\nimport { DragIcon } from '@contentful/f36-icons';\nimport t from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nvar z = Object.defineProperty,\n  q = Object.defineProperties;\nvar J = Object.getOwnPropertyDescriptors;\nvar d = Object.getOwnPropertySymbols;\nvar P = Object.prototype.hasOwnProperty,\n  h = Object.prototype.propertyIsEnumerable;\nvar x = (o, r, e) => r in o ? z(o, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : o[r] = e,\n  i = (o, r) => {\n    for (var e in r || (r = {})) P.call(r, e) && x(o, e, r[e]);\n    if (d) for (var e of d(r)) h.call(r, e) && x(o, e, r[e]);\n    return o;\n  },\n  g = (o, r) => q(o, J(r));\nvar A = (o, r) => {\n  var e = {};\n  for (var n in o) P.call(o, n) && r.indexOf(n) < 0 && (e[n] = o[n]);\n  if (o != null && d) for (var n of d(o)) r.indexOf(n) < 0 && h.call(o, n) && (e[n] = o[n]);\n  return e;\n};\nvar T = () => ({\n  label: css({\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    padding: 0,\n    margin: \"-1px\",\n    overflow: \"hidden\",\n    clip: \"rect(0, 0, 0, 0)\",\n    border: 0\n  }),\n  root: ({\n    isActive: o,\n    isFocused: r,\n    isHovered: e,\n    variant: n\n  }) => cx(css({\n    alignItems: \"center\",\n    backgroundColor: \"transparent\",\n    border: 0,\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    padding: 0,\n    margin: 0,\n    position: \"relative\",\n    transition: `background-color ${t.transitionDurationDefault} ${t.transitionEasingDefault}`,\n    width: t.spacingL,\n    \"&:focus\": {\n      boxShadow: t.glowPrimary\n    },\n    \"&:focus:not(:focus-visible)\": {\n      boxShadow: \"unset\"\n    },\n    \"&:focus-visible\": {\n      boxShadow: t.glowPrimary\n    }\n  }), n === \"secondary\" && css({\n    borderRight: `1px solid ${t.gray200}`,\n    borderTopLeftRadius: t.borderRadiusMedium,\n    borderBottomLeftRadius: t.borderRadiusMedium,\n    backgroundColor: t.gray100,\n    \"&:hover\": {\n      backgroundColor: hexToRGBA(t.gray900, .08)\n    }\n  }), n === \"secondary\" && (o || r || e) && css({\n    backgroundColor: hexToRGBA(t.gray900, .08)\n  }), (o || r || e) && css({\n    cursor: o ? \"grabbing\" : \"grab\"\n  }))\n});\nvar Q = \"div\";\nfunction V(o, r) {\n  let e = T(),\n    D = o,\n    {\n      as: n = Q,\n      className: _,\n      isActive: C,\n      isFocused: w,\n      isHovered: G,\n      label: f,\n      onBlur: u,\n      onFocus: c,\n      onMouseEnter: m,\n      onMouseLeave: b,\n      testId: N = \"cf-ui-drag-handle\",\n      style: R,\n      variant: k = \"secondary\"\n    } = D,\n    y = A(D, [\"as\", \"className\", \"isActive\", \"isFocused\", \"isHovered\", \"label\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"testId\", \"style\", \"variant\"]),\n    [I, E] = useState(w),\n    [S, H] = useState(G),\n    B = useCallback(a => {\n      E(!0), c && c(a);\n    }, [c]),\n    U = useCallback(a => {\n      E(!1), u && u(a);\n    }, [u]),\n    $ = useCallback(a => {\n      H(!0), m && m(a);\n    }, [m]),\n    j = useCallback(a => {\n      H(!1), b && b(a);\n    }, [b]),\n    v = {\n      className: cx(e.root({\n        isActive: C,\n        isFocused: I,\n        isHovered: S,\n        variant: k\n      }), _),\n      \"data-test-id\": N,\n      onBlur: U,\n      onFocus: B,\n      onMouseEnter: $,\n      onMouseLeave: j,\n      ref: r,\n      style: R\n    };\n  return n === \"div\" ? s.createElement(\"div\", g(i(i({}, y), v), {\n    role: \"button\",\n    tabIndex: 0\n  }), s.createElement(DragIcon, {\n    variant: \"muted\"\n  }), s.createElement(\"span\", {\n    className: e.label\n  }, f)) : s.createElement(\"button\", g(i(i({}, y), v), {\n    type: \"button\"\n  }), s.createElement(DragIcon, {\n    variant: \"muted\"\n  }), s.createElement(\"span\", {\n    className: e.label\n  }, f));\n}\nvar W = s.forwardRef(V);\nexport { W as DragHandle };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-drag-handle\\src\\DragHandle.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-drag-handle\\src\\DragHandle.styles.ts"],"sourcesContent":["import React, {\n  useCallback,\n  useState,\n  type ElementType,\n  type FocusEventHandler,\n  type MouseEventHandler,\n  type Ref,\n} from 'react';\nimport { cx } from 'emotion';\nimport type {\n  PolymorphicComponent,\n  PolymorphicProps,\n  CommonProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { DragIcon } from '@contentful/f36-icons';\n\nimport { getStyles } from './DragHandle.styles';\n\n// We use div instead of a button because react-sortable-hoc lib cancels sorting if the event target is button.\n//\n// The other alternative way to fix it was to pass a custom `shouldCancelStart` callback,\n// in every place where we use this component with react-sortable-hoc.\n// (the custom callback with all the logic from default callback, but without button event cancelation).\n// So we decided that just changing it to the div, as it was in v3, is a better fix.\n//\n// default shouldCancelStart callback:\n// https://github.com/clauderic/react-sortable-hoc/blob/d94ba3cc67cfc7d6d460b585e7723bdb50015e53/src/SortableContainer/defaultShouldCancelStart.js\nconst DRAG_HANDLE_DEFAULT_TAG = 'div';\n\nexport interface DragHandleInternalProps extends CommonProps {\n  /**\n   * The element used for the root node\n   * @default div\n   */\n  as?: 'button' | 'div';\n  /**\n   * Applies styling for when the component is actively being dragged by\n   * the user\n   */\n  isActive?: boolean;\n  /**\n   * Applies focus styling\n   */\n  isFocused?: boolean;\n  /**\n   * Applies hover styling\n   */\n  isHovered?: boolean;\n  /**\n   * Label rendered in DragHandle - not visible on screen as its purpose\n   * is for screen readers only\n   */\n  label: string;\n  /**\n   * Set type button for div element\n   */\n  type?: string;\n\n  /**\n   * Determines style variation\n   * @default secondary\n   */\n  variant?: 'secondary' | 'transparent';\n}\n\nexport type DragHandleProps<\n  E extends ElementType = typeof DRAG_HANDLE_DEFAULT_TAG,\n> = PolymorphicProps<DragHandleInternalProps, E>;\n\nfunction _DragHandle<E extends ElementType = typeof DRAG_HANDLE_DEFAULT_TAG>(\n  props: DragHandleProps<E>,\n  ref: Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = DRAG_HANDLE_DEFAULT_TAG,\n    className,\n    isActive,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    label,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    testId = 'cf-ui-drag-handle',\n    style,\n    variant = 'secondary',\n    ...otherProps\n  } = props;\n  const [isFocused, setisFocused] = useState(isFocusedProp);\n  const [isHovered, setisHovered] = useState(isHoveredProp);\n\n  const handleFocus = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      setisFocused(true);\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      setisFocused(false);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [onBlur],\n  );\n\n  const handleMouseEnter = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setisHovered(true);\n\n      if (onMouseEnter) {\n        onMouseEnter(event);\n      }\n    },\n    [onMouseEnter],\n  );\n\n  const handleMouseLeave = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setisHovered(false);\n\n      if (onMouseLeave) {\n        onMouseLeave(event);\n      }\n    },\n    [onMouseLeave],\n  );\n\n  const commonProps = {\n    className: cx(\n      styles.root({ isActive, isFocused, isHovered, variant }),\n      className,\n    ),\n    'data-test-id': testId,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref,\n    style,\n  };\n\n  if (as === 'div') {\n    return (\n      <div {...otherProps} {...commonProps} role=\"button\" tabIndex={0}>\n        <DragIcon variant=\"muted\" />\n        <span className={styles.label}>{label}</span>\n      </div>\n    );\n  }\n\n  return (\n    <button {...otherProps} {...commonProps} type=\"button\">\n      <DragIcon variant=\"muted\" />\n      <span className={styles.label}>{label}</span>\n    </button>\n  );\n}\n\nexport const DragHandle: PolymorphicComponent<\n  ExpandProps<DragHandleInternalProps>,\n  typeof DRAG_HANDLE_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_DragHandle);\n","import { cx, css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { DragHandleProps } from './DragHandle';\n\nexport const getStyles = () => ({\n  label: css({\n    position: 'absolute',\n    width: '1px',\n    height: '1px',\n    padding: 0,\n    margin: '-1px',\n    overflow: 'hidden',\n    clip: 'rect(0, 0, 0, 0)',\n    border: 0,\n  }),\n  root: ({\n    isActive,\n    isFocused,\n    isHovered,\n    variant,\n  }: {\n    isActive: boolean;\n    isFocused: boolean;\n    isHovered: boolean;\n    variant: DragHandleProps['variant'];\n  }) => {\n    return cx(\n      css({\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        border: 0,\n        boxSizing: 'border-box',\n        display: 'flex',\n        justifyContent: 'center',\n        padding: 0,\n        margin: 0, // remove the default button margin in Safari.\n        position: 'relative',\n        transition: `background-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n        width: tokens.spacingL,\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      }),\n      variant === 'secondary' &&\n        css({\n          borderRight: `1px solid ${tokens.gray200}`,\n          borderTopLeftRadius: tokens.borderRadiusMedium,\n          borderBottomLeftRadius: tokens.borderRadiusMedium,\n          backgroundColor: tokens.gray100,\n          '&:hover': {\n            backgroundColor: hexToRGBA(tokens.gray900, 0.08),\n          },\n        }),\n      variant === 'secondary' &&\n        (isActive || isFocused || isHovered) &&\n        css({\n          backgroundColor: hexToRGBA(tokens.gray900, 0.08),\n        }),\n      (isActive || isFocused || isHovered) &&\n        css({\n          cursor: isActive ? 'grabbing' : 'grab',\n        }),\n    );\n  },\n});\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}