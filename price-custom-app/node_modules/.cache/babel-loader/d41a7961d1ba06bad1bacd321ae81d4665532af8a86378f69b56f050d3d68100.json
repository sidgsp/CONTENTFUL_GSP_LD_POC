{"ast":null,"code":"import s, { useCallback, useState, useEffect } from 'react';\nimport { isValid, startOfDay, endOfDay, parse, format } from 'date-fns';\nimport { css } from 'emotion';\nimport n from '@contentful/f36-tokens';\nimport { DayPicker } from 'react-day-picker';\nexport { Day, DayContent, useDayPicker } from 'react-day-picker';\nimport { Popover } from '@contentful/f36-popover';\nimport ne from 'react-focus-lock';\nimport { TextInput } from '@contentful/f36-forms';\nimport { IconButton } from '@contentful/f36-button';\nimport { CalendarIcon } from '@contentful/f36-icons';\nvar U = Object.defineProperty,\n  X = Object.defineProperties;\nvar q = Object.getOwnPropertyDescriptors;\nvar b = Object.getOwnPropertySymbols;\nvar L = Object.prototype.hasOwnProperty,\n  z = Object.prototype.propertyIsEnumerable;\nvar O = (t, o, r) => o in t ? U(t, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : t[o] = r,\n  m = (t, o) => {\n    for (var r in o || (o = {})) L.call(o, r) && O(t, r, o[r]);\n    if (b) for (var r of b(o)) z.call(o, r) && O(t, r, o[r]);\n    return t;\n  },\n  v = (t, o) => X(t, q(o));\nvar I = (t, o) => {\n  var r = {};\n  for (var a in t) L.call(t, a) && o.indexOf(a) < 0 && (r[a] = t[a]);\n  if (t != null && b) for (var a of b(t)) o.indexOf(a) < 0 && z.call(t, a) && (r[a] = t[a]);\n  return r;\n};\nvar M = () => ({\n  calendar: css({\n    padding: n.spacingM\n  })\n});\nvar W = 40,\n  A = () => ({\n    vhidden: css({\n      boxSizing: \"border-box\",\n      padding: \"0\",\n      margin: \"0\",\n      background: \"transparent\",\n      border: \"0\",\n      MozAppearance: \"none\",\n      WebkitAppearance: \"none\",\n      appearance: \"none\",\n      position: \"absolute\",\n      top: \"0\",\n      width: \"1px\",\n      height: \"1px\",\n      overflow: \"hidden\",\n      clip: \"rect(1px, 1px, 1px, 1px)\"\n    }),\n    button_reset: css({\n      appearance: \"none\",\n      position: \"relative\",\n      margin: 0,\n      padding: 0,\n      border: \"none\",\n      outline: \"none\",\n      background: \"none\"\n    }),\n    button: css({\n      borderRadius: \"50%\",\n      cursor: \"pointer\",\n      color: n.gray900,\n      \"&.rdp-day_disabled\": {\n        color: n.gray400,\n        pointerEvents: \"none\"\n      },\n      \"&:focus, &:active\": {\n        boxShadow: n.glowPrimary\n      },\n      \"&:focus:not(:focus-visible)\": {\n        boxShadow: \"unset\"\n      },\n      \"&:hover\": {\n        backgroundColor: n.gray200\n      },\n      \"&.rdp-day_selected:not(.rdp-day_disabled)\": {\n        backgroundColor: n.blue600,\n        color: n.colorWhite,\n        fontWeight: n.fontWeightDemiBold\n      }\n    }),\n    months: css({\n      display: \"flex\"\n    }),\n    month: css({\n      width: \"100%\",\n      margin: \"0 1em\",\n      \"&:first-child\": {\n        marginLeft: 0\n      },\n      \"&:last-child\": {\n        marginRight: 0\n      }\n    }),\n    table: css({\n      width: \"100%\",\n      margin: 0,\n      borderCollapse: \"collapse\"\n    }),\n    caption: css({\n      position: \"relative\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      padding: 0,\n      textAlign: \"left\",\n      \".rdp-multiple_months &\": {\n        display: \"block\",\n        textAlign: \"center\"\n      }\n    }),\n    caption_dropdowns: css({\n      position: \"relative\",\n      display: \"inline-flex\"\n    }),\n    caption_label: css({\n      position: \"relative\",\n      zIndex: 1,\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      margin: \"0\",\n      padding: \"0 \".concat(n.spacingXs),\n      height: \"2rem\",\n      whiteSpace: \"nowrap\",\n      fontSize: n.fontSizeM,\n      fontWeight: n.fontWeightMedium,\n      borderRadius: n.borderRadiusMedium,\n      \"& + &\": {\n        marginLeft: \"3px\"\n      }\n    }),\n    nav: css({\n      whiteSpace: \"nowrap\",\n      \".rdp-multiple_months .rdp-caption_start &\": {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"0\",\n        transform: \"translateY(-50%)\"\n      },\n      \".rdp-multiple_months .rdp-caption_end &\": {\n        position: \"absolute\",\n        top: \"50%\",\n        right: \"0\",\n        transform: \"translateY(-50%)\"\n      }\n    }),\n    nav_button: css({\n      width: \"2rem\",\n      height: \"2rem\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: \"transparent\"\n    }),\n    nav_button_previous: css({\n      marginRight: \"3px\"\n    }),\n    dropdown_month: css({\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\"\n    }),\n    dropdown_year: css({\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\"\n    }),\n    dropdown: css({\n      appearance: \"none\",\n      position: \"absolute\",\n      zIndex: 2,\n      top: \"0\",\n      bottom: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      margin: \"0\",\n      padding: \"0\",\n      cursor: \"pointer\",\n      opacity: \"0\",\n      border: \"none\",\n      backgroundColor: \"transparent\",\n      fontFamily: \"inherit\",\n      fontSize: \"inherit\",\n      lineHeight: \"inherit\",\n      \"&:focus:not([disabled]) + div, &:active:not([disabled]) + div\": {\n        boxShadow: n.glowPrimary\n      },\n      \"&:hover:not([disabled]) + div, &:hover:not([disabled]) + div\": {\n        backgroundColor: n.gray200\n      }\n    }),\n    dropdown_icon: css({\n      marginLeft: \"8px\"\n    }),\n    head: css({\n      border: 0\n    }),\n    head_row: css({\n      height: \"100%\"\n    }),\n    row: css({\n      height: \"100%\"\n    }),\n    head_cell: css({\n      verticalAlign: \"middle\",\n      fontSize: n.fontSizeS,\n      fontWeight: n.fontWeightDemiBold,\n      textAlign: \"center\",\n      height: \"32px\",\n      color: n.gray600\n    }),\n    tbody: css({\n      border: 0\n    }),\n    tfoot: css({\n      margin: \"0.5em\"\n    }),\n    cell: css({\n      padding: \"2px\",\n      textAlign: \"center\"\n    }),\n    day: css({\n      display: \"flex\",\n      overflow: \"hidden\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: \"\".concat(W / 16, \"rem\"),\n      height: \"\".concat(W / 16, \"rem\"),\n      borderRadius: \"50%\",\n      margin: \"auto\",\n      \"&.rdp-day_today:not(.rdp-day_outside)\": {\n        fontWeight: n.fontWeightDemiBold\n      },\n      \"&.rdp-day_today:not(.rdp-day_outside):not(.rdp-day_selected):not(:hover)\": {\n        backgroundColor: n.blue100\n      }\n    }),\n    nav_icon: css({\n      width: \"0.625rem\"\n    })\n  });\nfunction E(t) {\n  var r;\n  let o = A();\n  return s.createElement(DayPicker, v(m({\n    captionLayout: \"dropdown-buttons\"\n  }, t), {\n    weekStartsOn: (r = t.weekStartsOn) != null ? r : 1,\n    classNames: o\n  }));\n}\nfunction se(t) {\n  let o = M(),\n    _ = t,\n    {\n      testId: r = \"cf-ui-datepicker\",\n      className: a,\n      style: k,\n      inputProps: l,\n      popoverProps: x,\n      selected: p,\n      onSelect: d,\n      fromDate: c,\n      toDate: u,\n      locale: P,\n      dateFormat: g = \"dd LLL yyyy\",\n      defaultIsOpen: V\n    } = _,\n    B = I(_, [\"testId\", \"className\", \"style\", \"inputProps\", \"popoverProps\", \"selected\", \"onSelect\", \"fromDate\", \"toDate\", \"locale\", \"dateFormat\", \"defaultIsOpen\"]),\n    f = useCallback(i => !(!isValid(i) || c && startOfDay(c).getTime() > i.getTime() || u && i.getTime() > endOfDay(u).getTime()), [c, u]),\n    y = useCallback(i => parse(i, g, new Date(), {\n      locale: P\n    }), [P, g]),\n    [Y, C] = useState(V),\n    [h, w] = useState(() => p ? format(p, g) : \"\");\n  useEffect(() => {\n    if (!p) {\n      w(\"\");\n      return;\n    }\n    p.getTime() !== y(h).getTime() && w(format(p, g));\n  }, [p]);\n  let j = useCallback(i => {\n      w(i.currentTarget.value);\n      let N = y(i.currentTarget.value);\n      f(N) ? d(N) : d(void 0);\n    }, [d, y, f]),\n    $ = useCallback(i => {\n      i && f(i) && (d(i), C(!1));\n    }, [d, f]),\n    G = h && !f(y(h));\n  return s.createElement(Popover, m({\n    isOpen: Y,\n    onClose: () => C(!1)\n  }, x), s.createElement(Popover.Trigger, null, s.createElement(pe, {\n    className: a,\n    style: k,\n    testId: r,\n    isDisabled: l == null ? void 0 : l.isDisabled,\n    onTriggerClick: () => {\n      C(i => !i);\n    }\n  }, s.createElement(TextInput, m({\n    placeholder: format(new Date(), g),\n    value: h,\n    onChange: j,\n    isInvalid: (l == null ? void 0 : l.isInvalid) || G,\n    \"aria-label\": \"Enter date\",\n    testId: \"cf-ui-datepicker-input\"\n  }, l)))), s.createElement(Popover.Content, null, s.createElement(ne, {\n    focusOptions: {\n      preventScroll: !0\n    },\n    returnFocus: !0\n  }, s.createElement(E, v(m({}, B), {\n    className: o.calendar,\n    mode: \"single\",\n    selected: p,\n    onSelect: $,\n    initialFocus: !1,\n    defaultMonth: p,\n    fromDate: c,\n    toDate: u,\n    locale: P\n  })))));\n}\nvar pe = s.forwardRef((t, o) => {\n  let c = t,\n    {\n      children: r,\n      testId: a,\n      style: k,\n      className: l,\n      onTriggerClick: x,\n      isDisabled: p\n    } = c,\n    d = I(c, [\"children\", \"testId\", \"style\", \"className\", \"onTriggerClick\", \"isDisabled\"]);\n  return s.createElement(TextInput.Group, {\n    ref: o,\n    className: l,\n    style: k,\n    testId: a\n  }, r, s.createElement(IconButton, m({\n    \"aria-label\": \"Use calendar\",\n    variant: \"secondary\",\n    icon: s.createElement(CalendarIcon, {\n      \"aria-label\": \"calendar\"\n    }),\n    onClick: x,\n    isDisabled: p,\n    testId: \"cf-ui-datepicker-button\"\n  }, d)));\n});\nexport { E as Calendar, se as Datepicker };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-datepicker\\src\\Datepicker.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-datepicker\\src\\Datepicker.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-datepicker\\src\\Calendar\\Calendar.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-datepicker\\src\\Calendar\\Calendar.styles.ts","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-datepicker\\src\\Calendar\\index.ts"],"sourcesContent":["import React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport type { CommonProps } from '@contentful/f36-core';\n\nimport { format, isValid, parse, startOfDay, endOfDay } from 'date-fns';\nimport { getStyles } from './Datepicker.styles';\nimport { Calendar } from './Calendar';\nimport { Popover } from '@contentful/f36-popover';\nimport type { DayPickerSingleProps } from 'react-day-picker';\nimport FocusLock from 'react-focus-lock';\nimport { TextInput, type TextInputProps } from '@contentful/f36-forms';\nimport { IconButton } from '@contentful/f36-button';\nimport { CalendarIcon } from '@contentful/f36-icons';\nimport type { PopoverProps } from '@contentful/f36-popover';\n\nexport type DatepickerProps = CommonProps & {\n  /**\n   * Callback fired when the day is selected\n   */\n  onSelect: (day: Date | undefined) => void;\n\n  /**\n   * Format that is used to display date in the input,\n   * It is based on (Unicode Technical Standart #35)[https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table]\n   *\n   * @default 'dd LLL yyyy' e.g. 31 Jan 2022\n   */\n  dateFormat?: string;\n\n  /**\n   * If `true`, the Datepicker will be initially opened.\n   */\n  defaultIsOpen?: boolean;\n\n  /**\n   * Props to pass to the TextInput component\n   */\n  inputProps?: Partial<TextInputProps>;\n\n  /**\n   * Props to pass to the Popover (Dropdown) component\n   */\n  popoverProps?: Partial<PopoverProps>;\n} & Omit<\n    DayPickerSingleProps,\n    | 'mode'\n    | 'onSelect'\n    | 'fromMonth'\n    | 'toMonth'\n    | 'fromYear'\n    | 'toYear'\n    | 'classNames'\n    | 'className'\n  >;\n\n/**\n * Provides functionality for date selection.\n */\nexport function Datepicker(props: DatepickerProps) {\n  const styles = getStyles();\n  const {\n    testId = 'cf-ui-datepicker',\n    className,\n    style,\n    inputProps,\n    popoverProps,\n    selected,\n    onSelect,\n    fromDate,\n    toDate,\n    locale,\n    dateFormat = 'dd LLL yyyy',\n    defaultIsOpen,\n    ...otherProps\n  } = props;\n\n  const isDateValid = useCallback(\n    (date: Date) => {\n      if (!isValid(date)) {\n        return false;\n      }\n      if (fromDate && startOfDay(fromDate).getTime() > date.getTime()) {\n        return false;\n      }\n      if (toDate && date.getTime() > endOfDay(toDate).getTime()) {\n        return false;\n      }\n      return true;\n    },\n    [fromDate, toDate],\n  );\n\n  const parseInputDate = useCallback(\n    (value: string) => parse(value, dateFormat, new Date(), { locale }),\n    [locale, dateFormat],\n  );\n\n  const [isPopoverOpen, setIsPopoverOpen] = useState(defaultIsOpen);\n  const [inputValue, setInputValue] = useState<string>(() =>\n    selected ? format(selected, dateFormat) : '',\n  );\n\n  useEffect(() => {\n    if (!selected) {\n      setInputValue('');\n      return;\n    }\n\n    if (selected.getTime() !== parseInputDate(inputValue).getTime()) {\n      setInputValue(format(selected, dateFormat));\n    }\n    // we want to run this hook only when `selected` prop changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      setInputValue(e.currentTarget.value);\n\n      const date = parseInputDate(e.currentTarget.value);\n      if (isDateValid(date)) {\n        onSelect(date);\n      } else {\n        onSelect(undefined);\n      }\n    },\n    [onSelect, parseInputDate, isDateValid],\n  );\n\n  const handleDaySelect = useCallback(\n    (date: Date) => {\n      if (date && isDateValid(date)) {\n        onSelect(date);\n        setIsPopoverOpen(false);\n      }\n    },\n    [onSelect, isDateValid],\n  );\n\n  const isTextInputValueInvalid =\n    inputValue && !isDateValid(parseInputDate(inputValue));\n\n  return (\n    <Popover\n      isOpen={isPopoverOpen}\n      onClose={() => setIsPopoverOpen(false)}\n      {...popoverProps}\n    >\n      <Popover.Trigger>\n        {/* we need this additional component to pass <Popover.Trigger> props to the correct trigger button */}\n        <DatepickerTrigger\n          className={className}\n          style={style}\n          testId={testId}\n          isDisabled={inputProps?.isDisabled}\n          onTriggerClick={() => {\n            setIsPopoverOpen((prevState) => !prevState);\n          }}\n        >\n          <TextInput\n            placeholder={format(new Date(), dateFormat)}\n            value={inputValue}\n            onChange={handleInputChange}\n            isInvalid={inputProps?.isInvalid || isTextInputValueInvalid}\n            aria-label=\"Enter date\"\n            testId=\"cf-ui-datepicker-input\"\n            {...inputProps}\n          />\n        </DatepickerTrigger>\n      </Popover.Trigger>\n      <Popover.Content>\n        <FocusLock focusOptions={{ preventScroll: true }} returnFocus={true}>\n          <Calendar\n            {...otherProps}\n            className={styles.calendar}\n            mode=\"single\"\n            selected={selected}\n            onSelect={handleDaySelect}\n            initialFocus={false}\n            defaultMonth={selected}\n            fromDate={fromDate}\n            toDate={toDate}\n            locale={locale}\n          />\n        </FocusLock>\n      </Popover.Content>\n    </Popover>\n  );\n}\n\ntype DatepickerTriggerProps = {\n  children: React.ReactNode;\n  isDisabled: boolean;\n  onTriggerClick: () => void;\n} & Pick<DatepickerProps, 'className' | 'style' | 'testId'>;\n\n// eslint-disable-next-line react/display-name\nconst DatepickerTrigger = React.forwardRef<\n  HTMLDivElement,\n  DatepickerTriggerProps\n>((props, ref) => {\n  const {\n    children,\n    testId,\n    style,\n    className,\n    onTriggerClick,\n    isDisabled,\n    // props will be passed from <Popover.Trigger> wrapper\n    ...popoverTriggerProps\n  } = props;\n\n  return (\n    <TextInput.Group\n      ref={ref}\n      className={className}\n      style={style}\n      testId={testId}\n    >\n      {children}\n      <IconButton\n        aria-label=\"Use calendar\"\n        variant=\"secondary\"\n        icon={<CalendarIcon aria-label=\"calendar\" />}\n        onClick={onTriggerClick}\n        isDisabled={isDisabled}\n        testId=\"cf-ui-datepicker-button\"\n        {...popoverTriggerProps}\n      />\n    </TextInput.Group>\n  );\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => {\n  return {\n    calendar: css({\n      padding: tokens.spacingM,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { getStyles } from './Calendar.styles';\n\nimport {\n  DayPicker,\n  type DayPickerDefaultProps,\n  type DayPickerSingleProps,\n} from 'react-day-picker';\n\nexport type CalendarProps =\n  | Omit<DayPickerDefaultProps, 'classNames'>\n  | Omit<DayPickerSingleProps, 'classNames'>;\n\n/**\n * Provides functionality for calendar date selection. Used as a part of Datepicker component.\n * Based on the [React DayPicker](https://react-day-picker.js.org/) library.\n */\nexport function Calendar(props: CalendarProps) {\n  const styles = getStyles();\n\n  return (\n    <DayPicker\n      captionLayout=\"dropdown-buttons\"\n      {...props}\n      weekStartsOn={props.weekStartsOn ?? 1}\n      classNames={styles}\n    />\n  );\n}\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { ClassNames } from 'react-day-picker';\n\nconst cellSize = 40;\n\nexport const getStyles = (): ClassNames => {\n  return {\n    vhidden: css({\n      boxSizing: 'border-box',\n      padding: '0',\n      margin: '0',\n      background: 'transparent',\n      border: '0',\n      MozAppearance: 'none',\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      position: 'absolute',\n      top: '0',\n      width: '1px',\n      height: '1px',\n      overflow: 'hidden',\n      clip: 'rect(1px, 1px, 1px, 1px)',\n    }),\n    button_reset: css({\n      appearance: 'none',\n      position: 'relative',\n      margin: 0,\n      padding: 0,\n      border: 'none',\n      outline: 'none',\n      background: 'none',\n    }),\n    button: css({\n      borderRadius: '50%',\n      cursor: 'pointer',\n      color: tokens.gray900,\n\n      '&.rdp-day_disabled': {\n        color: tokens.gray400,\n        pointerEvents: 'none',\n      },\n      '&:focus, &:active': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset',\n      },\n\n      '&:hover': {\n        backgroundColor: tokens.gray200,\n      },\n\n      '&.rdp-day_selected:not(.rdp-day_disabled)': {\n        backgroundColor: tokens.blue600,\n        color: tokens.colorWhite,\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n    }),\n\n    months: css({\n      display: 'flex',\n    }),\n    month: css({\n      width: '100%',\n      margin: '0 1em',\n      '&:first-child': {\n        marginLeft: 0,\n      },\n      '&:last-child': {\n        marginRight: 0,\n      },\n    }),\n    table: css({\n      width: '100%',\n      margin: 0,\n      borderCollapse: 'collapse',\n    }),\n    caption: css({\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: 0,\n      textAlign: 'left',\n\n      '.rdp-multiple_months &': {\n        display: 'block',\n        textAlign: 'center',\n      },\n    }),\n    caption_dropdowns: css({\n      position: 'relative',\n      display: 'inline-flex',\n    }),\n    caption_label: css({\n      position: 'relative',\n      zIndex: 1,\n      display: 'inline-flex',\n      alignItems: 'center',\n      margin: '0',\n      padding: `0 ${tokens.spacingXs}`,\n      height: '2rem',\n      whiteSpace: 'nowrap',\n      fontSize: tokens.fontSizeM,\n      fontWeight: tokens.fontWeightMedium,\n      borderRadius: tokens.borderRadiusMedium,\n\n      '& + &': {\n        marginLeft: '3px',\n      },\n    }),\n    nav: css({\n      whiteSpace: 'nowrap',\n\n      '.rdp-multiple_months .rdp-caption_start &': {\n        position: 'absolute',\n        top: '50%',\n        left: '0',\n        transform: 'translateY(-50%)',\n      },\n\n      '.rdp-multiple_months .rdp-caption_end &': {\n        position: 'absolute',\n        top: '50%',\n        right: '0',\n        transform: 'translateY(-50%)',\n      },\n    }),\n\n    nav_button: css({\n      width: '2rem',\n      height: '2rem',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'transparent',\n    }),\n    nav_button_previous: css({\n      marginRight: '3px',\n    }),\n    dropdown_month: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown_year: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown: css({\n      appearance: 'none',\n      position: 'absolute',\n      zIndex: 2,\n      top: '0',\n      bottom: '0',\n      left: '0',\n      width: '100%',\n      margin: '0',\n      padding: '0',\n      cursor: 'pointer',\n      opacity: '0',\n      border: 'none',\n      backgroundColor: 'transparent',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      lineHeight: 'inherit',\n\n      '&:focus:not([disabled]) + div, &:active:not([disabled]) + div': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:hover:not([disabled]) + div, &:hover:not([disabled]) + div': {\n        backgroundColor: tokens.gray200,\n      },\n    }),\n\n    dropdown_icon: css({\n      marginLeft: '8px',\n    }),\n\n    head: css({\n      border: 0,\n    }),\n\n    head_row: css({\n      height: '100%',\n    }),\n\n    row: css({\n      height: '100%',\n    }),\n\n    head_cell: css({\n      verticalAlign: 'middle',\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightDemiBold,\n      textAlign: 'center',\n      height: '32px',\n      color: tokens.gray600,\n    }),\n\n    tbody: css({\n      border: 0,\n    }),\n\n    tfoot: css({\n      margin: '0.5em',\n    }),\n\n    cell: css({\n      padding: '2px',\n      textAlign: 'center',\n    }),\n    day: css({\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: `${cellSize / 16}rem`,\n      height: `${cellSize / 16}rem`,\n      borderRadius: '50%',\n      margin: 'auto',\n\n      '&.rdp-day_today:not(.rdp-day_outside)': {\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n      '&.rdp-day_today:not(.rdp-day_outside):not(.rdp-day_selected):not(:hover)':\n        {\n          backgroundColor: tokens.blue100,\n        },\n    }),\n\n    nav_icon: css({\n      width: '0.625rem',\n    }),\n  };\n};\n","export * from './Calendar';\nexport { Day, DayContent, useDayPicker } from 'react-day-picker';\nexport type { DayProps, DayContentProps } from 'react-day-picker';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}