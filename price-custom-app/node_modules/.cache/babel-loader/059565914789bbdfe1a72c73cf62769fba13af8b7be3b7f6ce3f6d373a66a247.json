{"ast":null,"code":"import l from 'react';\nimport { cx, css } from 'emotion';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { DragHandle } from '@contentful/f36-drag-handle';\nimport o from '@contentful/f36-tokens';\nvar L = Object.defineProperty;\nvar n = Object.getOwnPropertySymbols;\nvar b = Object.prototype.hasOwnProperty,\n  y = Object.prototype.propertyIsEnumerable;\nvar P = (t, e, r) => e in t ? L(t, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : t[e] = r,\n  i = (t, e) => {\n    for (var r in e || (e = {})) b.call(e, r) && P(t, r, e[r]);\n    if (n) for (var r of n(e)) y.call(e, r) && P(t, r, e[r]);\n    return t;\n  };\nvar h = (t, e) => {\n  var r = {};\n  for (var a in t) b.call(t, a) && e.indexOf(a) < 0 && (r[a] = t[a]);\n  if (t != null && n) for (var a of n(t)) e.indexOf(a) < 0 && y.call(t, a) && (r[a] = t[a]);\n  return r;\n};\nvar I = () => css({\n    borderLeft: `1px solid ${o.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: o.spacingXs,\n    minHeight: \"auto\",\n    transition: `background ${o.transitionDurationShort} ${o.transitionEasingDefault},\n    opacity ${o.transitionDurationDefault} ${o.transitionEasingDefault}`,\n    \"&:focus\": {\n      boxShadow: o.glowMuted,\n      borderLeftColor: o.gray300\n    },\n    \"&:hover, &:focus, &:active\": {\n      backgroundColor: o.gray300\n    }\n  }),\n  M = () => css({\n    color: o.gray700,\n    lineHeight: o.lineHeightM,\n    padding: o.spacingXs,\n    fontSize: o.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\"\n  }),\n  W = t => {\n    let e = r => {\n      switch (r) {\n        case \"active\":\n          return {\n            background: o.gray300\n          };\n        case \"deleted\":\n          return {\n            background: o.gray200,\n            textDecoration: \"line-through\",\n            opacity: \"0.5\"\n          };\n        default:\n          return {\n            background: o.gray200\n          };\n      }\n    };\n    return css(i({\n      display: \"inline-flex\",\n      fontFamily: o.fontStackPrimary,\n      alignItems: \"center\",\n      borderRadius: o.borderRadiusSmall,\n      border: \"none\",\n      padding: 0,\n      maxWidth: \"100%\"\n    }, e(t)));\n  };\nfunction x(t) {\n  return {\n    closeButton: I(),\n    label: M(),\n    icon: css({\n      fill: o.gray600,\n      verticalAlign: \"middle\",\n      outline: \"none\"\n    }),\n    pill: W(t)\n  };\n}\nvar v = l.forwardRef((t, e) => {\n  let g = t,\n    {\n      isDraggable: r,\n      label: a,\n      onClose: d,\n      testId: C = \"cf-ui-pill\",\n      onDrag: m,\n      className: D,\n      dragHandleComponent: c,\n      variant: S = \"idle\"\n    } = g,\n    k = h(g, [\"isDraggable\", \"label\", \"onClose\", \"testId\", \"onDrag\", \"className\", \"dragHandleComponent\", \"variant\"]),\n    p = x(S),\n    [H, f] = l.useState(!1),\n    T = l.useCallback(u => {\n      if (!u) return;\n      let {\n        scrollWidth: w,\n        offsetWidth: E\n      } = u.parentElement;\n      f(w > E);\n    }, [f]);\n  return l.createElement(\"div\", i({\n    className: cx(p.pill, D),\n    \"data-test-id\": C,\n    onDrag: m,\n    ref: e\n  }, k), (r || m) && (c || l.createElement(DragHandle, {\n    label: \"Reorder item\",\n    variant: \"transparent\"\n  })), l.createElement(Tooltip, {\n    content: a,\n    maxWidth: \"none\",\n    targetWrapperClassName: p.label,\n    isDisabled: !H\n  }, l.createElement(\"span\", {\n    ref: T\n  }, a)), d && l.createElement(Button, {\n    type: \"button\",\n    variant: \"transparent\",\n    startIcon: l.createElement(CloseIcon, null),\n    \"aria-label\": \"Close\",\n    onClick: d,\n    className: p.closeButton\n  }));\n});\nv.displayName = \"Pill\";\nexport { v as Pill };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["cx","css"],"sources":["C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-pill\\src\\Pill.tsx","C:\\Users\\Siddharth Ganti\\Desktop\\GSP_LD_POC\\price-custom-app\\node_modules\\@contentful\\f36-pill\\src\\Pill.styles.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { DragHandle } from '@contentful/f36-drag-handle';\nimport { PillVariants } from './types';\nimport { getPillStyles } from './Pill.styles';\n\nexport type PillInternalProps = CommonProps & {\n  /**\n   * Mark the pill as draggable. Drag icon is rendered when this property is set.\n   */\n  isDraggable?: boolean;\n  /**\n   * Text that will be shown on the pill\n   */\n  label: string;\n  /**\n   * Function that handles when the close icon is clicked. Close icon visibility depends on if this property is set.\n   */\n  onClose?: () => void;\n  /**\n   * Function that handles when the pill is dragged. Drag icon is rendered when this property is set.\n   */\n  onDrag?: () => void;\n  /**\n   * Custom component to be used as handler for the drag functionality.\n   */\n  dragHandleComponent?: React.ReactNode;\n  /**\n   * Determines style variation of Pill component\n   * @default idle\n   */\n  variant?: PillVariants;\n};\n\nexport type PillProps = PropsWithHTMLElement<PillInternalProps, 'div'>;\n\nexport const Pill = React.forwardRef<HTMLDivElement, ExpandProps<PillProps>>(\n  (props, ref) => {\n    const {\n      isDraggable,\n      label,\n      onClose,\n      testId = 'cf-ui-pill',\n      onDrag,\n      className,\n      dragHandleComponent,\n      variant = 'idle',\n      ...otherProps\n    } = props;\n\n    const styles = getPillStyles(variant);\n    const [textIsTruncated, setTextIsTruncated] = React.useState(false);\n\n    const trackRefChange = React.useCallback(\n      (ref: HTMLDivElement | null) => {\n        if (!ref) {\n          return;\n        }\n        const { scrollWidth, offsetWidth } = ref.parentElement;\n        setTextIsTruncated(scrollWidth > offsetWidth);\n      },\n      [setTextIsTruncated],\n    );\n\n    return (\n      <div\n        className={cx(styles.pill, className)}\n        data-test-id={testId}\n        onDrag={onDrag}\n        ref={ref}\n        {...otherProps}\n      >\n        {(isDraggable || onDrag) &&\n          (dragHandleComponent ? (\n            dragHandleComponent\n          ) : (\n            <DragHandle label=\"Reorder item\" variant=\"transparent\" />\n          ))}\n        <Tooltip\n          content={label}\n          maxWidth=\"none\"\n          targetWrapperClassName={styles.label}\n          isDisabled={!textIsTruncated}\n        >\n          <span ref={trackRefChange}>{label}</span>\n        </Tooltip>\n        {onClose && (\n          <Button\n            type=\"button\"\n            variant=\"transparent\"\n            startIcon={<CloseIcon />}\n            aria-label=\"Close\"\n            onClick={onClose}\n            className={styles.closeButton}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nPill.displayName = 'Pill';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { PillVariants } from './types';\n\nconst getCloseButtonStyle = () => {\n  return css({\n    borderLeft: `1px solid ${tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n    opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: tokens.glowMuted,\n      borderLeftColor: tokens.gray300,\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: tokens.gray300,\n    },\n  });\n};\n\nconst getLabelStyle = () => {\n  return css({\n    color: tokens.gray700,\n    lineHeight: tokens.lineHeightM,\n    padding: tokens.spacingXs,\n    fontSize: tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  });\n};\n\nconst getPillStyle = (variant: PillVariants) => {\n  const variantStyle = (variant: PillVariants) => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: tokens.gray300,\n        };\n      case 'deleted':\n        return {\n          background: tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5',\n        };\n      default:\n        return {\n          background: tokens.gray200,\n        };\n    }\n  };\n\n  return css({\n    display: 'inline-flex',\n    fontFamily: tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant),\n  });\n};\n\nexport function getPillStyles(variant: PillVariants) {\n  return {\n    closeButton: getCloseButtonStyle(),\n    label: getLabelStyle(),\n    icon: css({\n      fill: tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none',\n    }),\n    pill: getPillStyle(variant),\n  };\n}\n"],"mappings":";ACW8F,SAAAA,EAAA,EAAAC,GACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}