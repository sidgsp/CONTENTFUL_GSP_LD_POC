function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { wrapCollection } from '../common-utils';
import enhanceWithMethods from '../enhance-with-methods';

// PROPS //

// Remove and replace with BLOCKS as soon as rich-text-types supports mentions
export let CommentNode = /*#__PURE__*/function (CommentNode) {
  CommentNode["Document"] = "document";
  CommentNode["Paragraph"] = "paragraph";
  CommentNode["Mention"] = "mention";
  return CommentNode;
}({});

// Add "extends Block" as soon as rich-text-types supports mentions

// Add "extends Document" as soon as rich-text-types supports mentions.

// PARAMS //
// We keep this type as explicit as possible until we open up the comments entity further
// NESTED CLIENT //
/**
 * @private
 */
export default function createCommentApi(makeRequest) {
  const getParams = comment => ({
    spaceId: comment.sys.space.sys.id,
    environmentId: comment.sys.environment.sys.id,
    entryId: comment.sys.parentEntity.sys.id,
    commentId: comment.sys.id
  });
  return {
    update: function () {
      var _update = _asyncToGenerator(function* () {
        const raw = this.toPlainObject();
        const data = yield makeRequest({
          entityType: 'Comment',
          action: 'update',
          params: getParams(raw),
          payload: raw
        });
        return wrapComment(makeRequest, data);
      });
      function update() {
        return _update.apply(this, arguments);
      }
      return update;
    }(),
    delete: function () {
      var _delete2 = _asyncToGenerator(function* () {
        const raw = this.toPlainObject();
        yield makeRequest({
          entityType: 'Comment',
          action: 'delete',
          params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
            version: raw.sys.version
          })
        });
      });
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
  };
}

/**
 * @private
 */
export function wrapComment(makeRequest, data) {
  const comment = toPlainObject(copy(data));
  const commentWithMethods = enhanceWithMethods(comment, createCommentApi(makeRequest));
  return freezeSys(commentWithMethods);
}

/**
 * @private
 */
export const wrapCommentCollection = wrapCollection(wrapComment);