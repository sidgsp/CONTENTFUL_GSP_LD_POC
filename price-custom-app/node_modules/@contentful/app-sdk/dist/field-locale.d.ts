import { Channel } from './channel';
import { FieldInfo, FieldType, FieldLinkType, Items, SerializedJSONValue } from './types';
import { ExhaustiveFieldAPI } from './types/field-locale.types';
import { ValidationError } from './types/validation-error';
export default class FieldLocale implements ExhaustiveFieldAPI {
    id: string;
    name: string;
    locale: string;
    type: FieldType;
    required: boolean;
    validations: any[];
    items?: Items;
    linkType?: FieldLinkType;
    private _value;
    private _valueSignal;
    private _isDisabledSignal;
    private _schemaErrorsChangedSignal;
    private _channel;
    constructor(channel: Channel, info: FieldInfo);
    getValue(): any;
    setValue(value: any): Promise<SerializedJSONValue | undefined>;
    removeValue(): Promise<void>;
    setInvalid(isInvalid: boolean): Promise<unknown>;
    onValueChanged(handler: (value: any) => any): () => boolean;
    getIsDisabled(): boolean;
    onIsDisabledChanged(handler: (isDisabled: boolean) => any): () => boolean;
    getSchemaErrors(): ValidationError[];
    onSchemaErrorsChanged(handler: (errors: ValidationError[]) => void): () => boolean;
}
